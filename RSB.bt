//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: RSB.bt
//   Authors: Alexander Evdokimov
//   Version: 0.6
//   Purpose: Ghost Recon RSB file
 
//   History: 
//
//   2016.10 v0.6 initial release 
//------------------------------------------------

typedef enum <ubyte> {
    no,
    yes
} BOOL; // bool data type

typedef enum <uint> {
  sZero, 
  sOne, 
  sSource_Alpha, 
  sInverse_Source_Alpha, 
  sSource_Color, 
  sInverse_Source_Color, 
  sDestination_Color, 
  sInverse_Destination_Color, 
  sBoth_Source_Alpha, 
  sBoth_Inverse_Source_Alpha } SOURCE_FUNCTION_PARAMETER; 

typedef enum <uint> {
  dZero, 
  dOne, 
  dSource_Alpha, 
  dInverse_Source_Alpha_Source_Color, 
  dInverse_Source_Color, 
  dDestination_Color, 
  dInverse_Destination_Color, 
  dBoth_Source_Alpha, 
  dBoth_Inverse_Source_Alpha 
} DESTINATION_FUNCTION_PARAMETER; 

typedef enum <uint> {
  Never, 
  Less, 
  Equal, 
  Less_Equal, 
  Greater_Equal, 
  Always, } COMPARE_FUNCTION_PARAMETER;

typedef enum <uint>  {
  Cycle,
  Oscillate, 
  Constant} ANIMATION_TYPE;

typedef enum <uint>  {
  Rotate,
  Degrees_Sec } SCROLLING_TYPE;

typedef enum <uint> {
  NONE, 
  Carpet, 
  Concrete, 
  Wood, 
  Metal, 
  Asphalt, 
  Sand, 
  Lowgrass, 
  Highgrass, 
  Puddle, 
  Water, 
  Drywall, 
  Thin_Metal, 
  Thick_Metal, 
  Metal_Gas_Tank, 
  Steam_Pipe, 
  Electrical_Panel,   Snow, 
  Safety_Glass, 
  Bullet_Resistant_Glass, 
  Ice, 
  Mud, 
  Glass, 
  Foliage, 
  Gravel, 
  Glass_Shards, 
  Creaky_Wood,
  unset = 4294967295
} SURFACE_TYPE ; 

struct {
  UINT version; // *.rsb file version
  UINT width; // texture width
  UINT height; // texture height
  if (version > 7) { 
    UINT mn1;  
    UINT16 mn2; 
    BYTE mn3;
  }; 
  struct {
     UINT red_bits;
     UINT green_bits;
     UINT blue_bits;
     UINT alpha_bits;
  } RSB_BIT_INFO;
  if (version == 9) { 
    UINT mn4; // 
    UINT mn5; //
  };  
} HEADER;

BitfieldDisablePadding();

typedef struct {    
    ubyte Red   : HEADER.RSB_BIT_INFO.red_bits <name="Red">;
    ubyte Green : HEADER.RSB_BIT_INFO.green_bits <name="Green">;
    ubyte Blue  : HEADER.RSB_BIT_INFO.blue_bits <name="Blue">;
    ubyte Alpha : HEADER.RSB_BIT_INFO.alpha_bits <name="Alpha">;
} PIXEL <name="Pixel">;

typedef struct (int arraySize) {
  PIXEL array[arraySize] <optimize=false>;
} PIXEL_ARRAY;

PIXEL_ARRAY PixelArray(HEADER.width*HEADER.height) <optimize=false, name="Pixel Array", fgcolor=cBlack, bgcolor=0xccff66>;

if (HEADER.version > 2) {
    struct{
       if (HEADER.version > 5) { 
         UINT mn6; // 
       }; 
       BOOL AlphaBlending <name="AlphaBlending", comment="yes - use alpha channel">;
       BOOL AlphaTesting <name="AlphaTesting">;
       BOOL Sampling <name="Sampling">;
       BOOL Animation <name="Animation">;
       BOOL Scrolling <name="Scrolling">;
       BOOL Tiled <name="Tiled">;   // unused
       BOOL Compression <name="Compression">;   // unused
       BOOL Distortion <name="Distortion">;
       if (HEADER.version > 7) {
          UINT Tags;
       }
       else {
          BYTE mn7;
          UINT16 mn8;
       };
    
       SOURCE_FUNCTION_PARAMETER SourceFunction <name="Source Function">;
       DESTINATION_FUNCTION_PARAMETER DestinationFunction <name="Destination Function">;
       COMPARE_FUNCTION_PARAMETER CompareFunction <name="Compare Function">;
       BYTE ReferenceValue;
    
       struct { 
         SCROLLING_TYPE ScrollingType;    
         FLOAT HorizontalRate;
         FLOAT VerticalRate;
       } TEXTURE_SCROLLING <name="Scrolling">;
      
       struct {
         ANIMATION_TYPE AnimationType <name="Animation Type">; 
         FLOAT AnimationInterval;
         UINT TextureCount;
         if ((Animation) && (TextureCount)) {
              typedef struct {
                UINT TextureNameLength;
                char TextureName[TextureNameLength]; 
              } TEXTURE_NAME <optimize=false>;
        
              typedef struct (int arraySize) {
                TEXTURE_NAME array[arraySize];
              } TEXTURE_ARRAY <optimize=false>;
   
             TEXTURE_ARRAY RSBTextureArray(TextureCount) <optimize=false>; 
          };
       } ANIMATION <name="Animation">; 

       if (HEADER.version > 4) {        
         UINT MapsCount;   // unused
         UINT SubsamplingPriority;  // unused
       };

       BOOL Damaged <name="Damaged">;    
       if (Damaged > 0) {
         UINT TextureNameLength; // 
         if (TextureNameLength > 0) {
             char DamagedTextureName[TextureNameLength];
         };
       }; 
    
       if (HEADER.version > 2) {
          SURFACE_TYPE SurfaceType <name="Surface Type">; 
       };      
    } RSB_PROPERTIES;
};  

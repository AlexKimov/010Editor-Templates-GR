//------------------------------------------------
// 010 Editor v7.0 Binary Template
//
//      File: POB.bt
//   Authors: Alexander Evdokimov
//   Version: 0.4
//   Purpose: Ghost Recon POB file 
// File Mask: *.pob
// 
//   History: 
//
//   2016.12 v0.08 initial release
//------------------------------------------------

typedef enum <ubyte> {
    no,
    yes
} BOOL; // bool data type

struct {  
 struct {
    UINT Length; // 
    char Text[Length]; // 
  } BEGINPOB_STRING <name="POB File ID (Signature)">;
 struct {
    time_t CreateDate <name="POB File Creation Date">;
    time_t ModifiedDate <name="POB File Modified Date">;
  } DATETIME <name="POB File DATETIME">;
} POB_HEADER <name="POB Header", fgcolor=cBlack, bgcolor=0xccff66>;

struct {
  UINT Length; // 
  char Text[Length]; // 
} BEGINMODEL_STRING <name="Model section begin">;

typedef struct {
  struct {
    UINT SectionSize;
    UINT MN;
    struct {    
      UINT Length; // 
      char Text[Length]; //
      UINT Value;
    } VERSION; 
    struct {    
       UINT Length; // 
       char Text[Length]; //
    } MATERIAL_NAME_STRING <name="Material Name">; 
  } HEADER <name="Material Section Header">;
  struct { 
    FLOAT Opacity;
    FLOAT isFaceted;
    struct {              
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue; //
      FLOAT mn;
    } AMBIENT; 
    struct {           
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue; //
      FLOAT mn;
    } DIFFUSE;   
    struct { 
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue; //
      FLOAT mn;
    } SPECULAR;
    FLOAT SpecularLevel; //o.o5
    BOOL twoSide;
  } PARAMETRES;
} MATERIAL <name=MaterialName>;

typedef struct {
  struct {
    UINT SectionSize;
    UINT MN;
    struct {    
      UINT Length; 
      char Text[Length]; 
      UINT Value;
   } VERSION; 
    struct {    
       UINT Length;  
       char Text[Length]; 
    } TEXTURENAME_STRING <name="Texture Name">; 
  } HEADER <name="Textures section header">;

  BOOL mn;

  struct {    
     UINT Length;  
     char Text[Length]; 
  } TEXTURE_FILENAME_STRING <name="Texture .rsb file name">; 
  
  struct { 
    UINT AdvTransparencyType;  // 0 2 3
    UINT isTiled; // 1 - u tiled, 2 - v tiled, 3 - both none
    FLOAT SelfIllumination; // 0
  } PARAMETERS; 
} TEXTURE <name=TextureName>;

string MaterialName(MATERIAL &material) {
  return "Name: " + material.HEADER.MATERIAL_NAME_STRING.Text + " ";
} 

string TextureName(TEXTURE &texture) {
  return "FileName: " + texture.TEXTURE_FILENAME_STRING.Text + " ";
} 

struct {  
  struct { 
    UINT SectionSize;
    UINT MN;
    struct {    
      UINT Length; // 
      char Text[Length]; //
      UINT Value;
    } VERSION; 

    struct {
      UINT Length; // 
      char Text[Length]; // 
    } MATERIALLIST_STRING;
  } HEADER <name="1.0 MaterialList section header">;
    
  struct {
    UINT Count <name="Materials Count">;

    typedef struct (int arraySize) {
      MATERIAL array[arraySize] <optimize=false>;
    } MATERIAL_ARRAY; 

    MATERIAL_ARRAY MaterialArray(Count) <name="Material Array">; 
  } MATERIALS <name="1.1 Materials section">;

  struct {
    UINT Count <name="Textures Count">;
     if (Count > 0) {

        typedef struct (int arraySize) {
          TEXTURE array[arraySize] <optimize=false>;
        } TEXTURE_ARRAY; 
    
        TEXTURE_ARRAY TextureArray(Count) <name="Textures Array">; 
    };
  } TEXTURES <name="1.2 Textures section">;

} POBMATERIALLIST <name="1. MaterialList section">;


typedef struct {
    UINT Length;
    char PointName[Length];
    struct {
      struct { 
        FLOAT x;        
        FLOAT y;
        FLOAT z;
      } XAXIS;
       struct { 
        FLOAT x;
        FLOAT y;
        FLOAT z;
      } YAXIS;
      struct {
        FLOAT x;
        FLOAT y;
        FLOAT z;
      } ZAXIS;
      struct {
        FLOAT Y;
        FLOAT X;
        FLOAT Z;
      } POSITION;
    } TRANSFORMATION_MATRIX;   
} POINT <name=Point_Name>;

string Point_Name (POINT &point) {
  return "Name: " + point.PointName;
};

typedef struct {  
  struct { 
    UINT SectionSize;
    UINT MN;
    struct {    
      UINT Length; // 
      char Text[Length]; //
       UINT Value;
    } VERSION; 
    struct {
      UINT Length; // 
      char Text[Length]; // 
    } NAME_STRING;
  } HEADER <name="Section header">; 

  struct { 
     UINT SectionSize;
    UINT MN;
    struct {    
      UINT Length; // 
      char Text[Length]; //
      UINT Value;
    } VERSION; 
    struct {
      UINT Length; // 
      char Text[Length]; // 
     } NAMESTRING; 
    BOOL DarkMap <name="DarkMap">;
    BOOL CastShadows  <name="CastShadows">;
  } SUBSECTION_HEADER <name="Object section header">; 

struct {
  UINT VertexCount;  

  typedef struct {     
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
   } VERTEX <name="VERTEX">;

  typedef struct (int arraySize) {
    VERTEX array[arraySize];
  } VERTEX_ARRAY; 

  VERTEX_ARRAY VertexArray(VertexCount) <name="Object vertices array">; 

} VERTICES <name="Object vertices section">;

struct {

UINT Count;

typedef struct {
  struct {
      BOOL mn;
      BOOL iUseDetailedDarkmap;
      BOOL DetailTexture;
      UINT MaterialIndex;
      UINT isTextured;
      if (isTextured) {
        UINT TextureIndex;
        if (DetailTexture) {
           UINT DetailTextureIndex;
        };
      };
      struct {
        UINT MN;    
        UINT SelfIlluminationMap;
        UINT SpecularMap;
        UINT BumpMap;
        UINT ReflectionMap;
        UINT MapCount;
      } MAP;
   } PARAMETERS;

struct {
  UINT FacesCount; 

  typedef struct {     
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
    FLOAT MN;
   } FacesNormals;

  typedef struct (int arraySize) {
    FacesNormals array[arraySize];
  } POBFacesNormalsArray;
  
  POBFacesNormalsArray FacesNormalsArray(FacesCount);

  typedef struct  {
    UINT16 P1;
    UINT16 P2;
    UINT16 P3;
  } POBFaceIndicies;

  typedef struct (int arraySize) {
    POBFaceIndicies array[arraySize];
  } POBFaceIndiciesArray;
  
  POBFaceIndiciesArray FaceIndiciesArray(FacesCount);

  typedef struct  {
    UINT16 P1;
    UINT16 P2;
    UINT16 P3;
  } TextureIndicies;

  typedef struct (int arraySize) {
    TextureIndicies array[arraySize];
  } TextureIndiciesArray;
  
  TextureIndiciesArray PobTextureIndiciesArray(FacesCount);

} Faces <name="Faces">;

struct {  
  UINT VerticiesCount;
  UINT TextureCount;
  
  typedef struct   {
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
  } POBNormalsCoordinates;
 
  typedef struct (int arraySize) {
   POBNormalsCoordinates array[arraySize];
  } POBNormalsCoordinatesArray;

  POBNormalsCoordinatesArray NormalsCoordinatesArray(VerticiesCount);
 
  typedef struct   {
    FLOAT U;
    FLOAT V;
  } POBTextureCoordinates;

  typedef struct (int arraySize) {
   POBTextureCoordinates array[arraySize];
  } POBTextureCoordinatesArray;
 
  if (TextureCount > 0) {
    POBTextureCoordinatesArray TextureCoordinatesArray(VerticiesCount*TextureCount); 
  }; 
  typedef struct   {
    FLOAT X;  // 1, 0.5, 
    FLOAT Y;  // 1, 0.5,  
    FLOAT Z;  // 1, 0.5, 
    FLOAT W;  // 1
  } NORMALS_COORDINATE; 

  typedef struct (int arraySize) {
   NORMALS_COORDINATE array[arraySize];
  } NORMALS_COORDINATE_ARRAY; 

  NORMALS_COORDINATE_ARRAY NormalsCoordinatArray(VerticiesCount); 
} TEXTURE_VERTICIES <name="Texture data">;
} OBJECT_DATA;

typedef struct (int arraySize) {
  OBJECT_DATA array[arraySize] <optimize=false>;
} OBJECT_DATA_ARRAY; 

OBJECT_DATA_ARRAY POBObjectsDataArray(Count) <name="Objects data array">; 
} OBJECTSDATA <name="Objects data section">;
//-----------------------------------------------------

struct {

  UINT Count;   
  
  typedef struct(int arraySize) {
    POINT array[arraySize] <optimize=false>;
  } POINT_ARRAY;
  
  POINT_ARRAY POBPointArray(Count) <name="Point array">;

} Points <name="Points section">;


  struct {
     struct {
      UINT VerticiesCount;

      if (VerticiesCount > 0) {
        typedef struct {     
          FLOAT X;
          FLOAT Y;
          FLOAT Z;
        } SOVertice;

        typedef struct (int arraySize) {
          SOVertice array[arraySize];
        } SOVerticiesArray; 

        SOVerticiesArray SOVArray(VerticiesCount); 
      };
    } VERTICIES;

    struct {
      UINT FacesCount;

      if (FacesCount > 0) {
        typedef struct {     
          FLOAT X;
          FLOAT Y;
          FLOAT Z;
          FLOAT mn;
         } CollisionFaceNormals;

        typedef struct (int arraySize) {
          CollisionFaceNormals array[arraySize];
        } CollisionFaceNormalsArray;

        CollisionFaceNormalsArray POBCollisionFaceNormalsArray(FacesCount);
      };
    } FACES;

  } CollisionObjects <name="Collision (non-rendered) objects section">;

struct {
  UINT ObjectsCount;

  //UINT m2;
  struct {   
    UINT Count;
    if (Count > 0) {     
        typedef struct {
          UINT Length;
          char Name[Length]; // for example staticengineblock
          BYTE FloorPolygon; // 2 - non colidable 2d, 10 - non colidable 3d 26 - 3
          BYTE CarvingBoundary; // 1 - Carving Boundary  2 - cannot carve
          BYTE MN; // 0
          BYTE MN; // 0   
          
          UINT SurfaceProperty; // 0 - 12
        } POLYGON_PARAMETERS;
 
        typedef struct (int arraySize) {
          POLYGON_PARAMETERS array[arraySize] <optimize=false>;
        } POLYGON_ARRAY;       

        POLYGON_ARRAY MAPPolygonsArray(Count);
    };
  } POLYGON;
 
   struct {
      UINT Count; // 0
      if (Count > 0) {  

          typedef struct {
            struct {
              UINT Length;
              char Name[Length]; // for example staticengineblock
              BYTE FloorPolygon; // 2 - non colidable 2d, 10 - non colidable 3d 26 - 3
              BYTE CarvingBoundary; // 1 - Carving Boundary  2 - cannot carve
              BYTE MN; // 0
              BYTE MN; // 0   
              UINT SurfaceProperty; // 0 - 18
            } POLYGON_PARAMS;
           
            UINT FCount;
            typedef struct  {
              UINT16 Point1;
              UINT16 Point2;
              UINT16 Point3;
              UINT16 FaceValue;
            } FIndicies;

            typedef struct (int arraySize) {
              FIndicies array[arraySize] <optimize=false>;
            } FIndiciesArray;
  
            FIndiciesArray POBFIndiciesArray(FCount);       
          } NonRendObject;
          
          typedef struct (int arraySize) {
            NonRendObject array[arraySize] <optimize=false>;
          } NonRendObjectArray;
  
          NonRendObjectArray POBNonRendObjectArray(Count);
      };
    } NONROBJECTS <name="Non-rendered objects section">; 
  } OBJECTS;

} GEOMETRY <name=ObjectName>;

string ObjectName(GEOMETRY &geometry) {
  return "Name: " + geometry.HEADER.NAME_STRING.Text + " ";
} 

struct {   //
  struct { 
    UINT SectionSize;
    UINT MN;
    struct {    
      UINT Length; // 
      char Text[Length]; //
      UINT Value;
    } VERSION; 
    struct {
      UINT Length; // 
      char Text[Length]; // 
    } GEOMETRYLIST_STRING;
  } HEADER <name="GeometryList Header">;  

  struct {   
    UINT Count <name="Object Count">;
    typedef struct (int arraySize) {
      GEOMETRY array[arraySize] <optimize=false>;
    } GEOMETRY_ARRAY; 
    GEOMETRY_ARRAY GeometryArray(Count) <name="Object geometry data array">; 
  } GEOMETRYDATA <name="Geometry data section">;
} POBGEOMETRYLIST <name="2. GeometryList Section">;

struct {
  UINT Length; // 
  char Text[Length]; // 
} ENDMODEL_STRING <name="Model section end">;

typedef struct {

  typedef struct { 
    UINT SectionSize;
    UINT MN;
    struct {    
        UINT Length; // 1
        char Text[Length]; //
        UINT Value;
    } VERSION;  

    struct {    
        UINT Length; // 
        char Text[Length]; //
    } NAME_STRING;         
  } FOHEADER;


  typedef struct { 
     struct { 
        FLOAT x;        
        FLOAT y;
        FLOAT z;
      } XAxis;
       struct { 
        FLOAT x;
        FLOAT y;
        FLOAT z;
      } YAxis;
      struct {
        FLOAT x;
        FLOAT y;
        FLOAT z;
      } ZAxis;
      struct {
        FLOAT Y;
        FLOAT X;
        FLOAT Z;
      } Position;
  } TRANSFORMATION_MATRIX2;
  typedef struct {
      UINT DynamicsType; // 2 - Pbomb (Parray)
      FLOAT Duration;
      FLOAT Strength;
      FLOAT Range;
      UINT ExplosionType; // 2 - Eponential

      struct {
        FLOAT X; // 0
        FLOAT Y; // 0  
        FLOAT X; // 1 
      } Position; 

      FLOAT MN;
      FLOAT MN;
      FLOAT MN;

      UINT BlastSymmetry; // 1 - cylindrical
      FLOAT StartTime;   
      FLOAT Chaos;  
  } SPACE_WARPS;   
        
    struct {
      BYTE A; 
      UINT Y;
      UINT SpawnOnDeath; // 1
      FLOAT Z;
      FLOAT Y;
      FLOAT X;
      FLOAT Z;
      FLOAT Y;
      BYTE X;
      BYTE X;
      UINT AA; 
      BYTE MN; 
    } HEADER;

    UINT ParticleSystemType; // 0 - blizzard, 1 - snow, 2 - Spray, 3 - SuperSpray, 4 - PArray, 5 - PCloud
    if (ParticleSystemType != 3) {
      struct { 
        UINT Length; // 
        char Text[Length]; //
      } Properties;
    }   
 
    struct { 
      FLOAT Width; // IconSize
      FLOAT Length; // 
      FLOAT Height; // 3D
    } EMITTER_SIZE;
    
    struct { 
      FLOAT ParticleSpeed; // Parray (units in sec) (Particle Motion Speed (units per frame) * 30)
      FLOAT ParticleSpeedVariation; // %ParticleSpeed 
    } PARTICLE_MOTION;
    
    struct {
      FLOAT GrowFor; // Parray (Particle size Grow For / 30)     
      FLOAT FadeFor; // Parray (Particle size Fade For / 30)
    } PARTICLE_Size;
    
    struct {
      FLOAT MN;
      FLOAT MN;
    } SOME;
    
    struct {
      FLOAT Life;
      FLOAT LifeVariation; 
    } PARTICLE_TIMING;
    
    struct{
      FLOAT ParticleSize;
      FLOAT ParticleSizeVariation;
    } PARTICLE_SIZE;
    
    struct {
      FLOAT UseRate; // * 3
      UINT UseTotal;
    } PARTICLE_QUANTITY;
    
    struct {
      UINT SpinAxisControlType; // 0 - Random, 2- user defined
      FLOAT XAxis;
      FLOAT YAxis;
      FLOAT ZAxis;
      FLOAT Variation;
    } SpinAxisControl ;
    
    FLOAT MN; // 1  
    FLOAT MN; // 0
    // 
    struct {
      FLOAT OffAxis;
      FLOAT Spread;
      FLOAT OffPlane;
      FLOAT Spread;
    } PARTICLE_FORMATION;
    //
    struct {        
      FLOAT GrowFor;
      FLOAT FadeFor;
    } ParticleSize2;
    
    FLOAT MN;
    FLOAT MN;    
    UINT MN;     
    FLOAT MN;
    FLOAT MN;
    FLOAT MN;
    FLOAT MN;
        
    struct {
      FLOAT SpinTime;
      FLOAT SpinTimeVariation;
      FLOAT Phase;
      FLOAT PhaseVariation;
    } SpinSpeedControls;
    
    UINT particleType; // 2 - object fragments
    
    UINT SpawnType; // 2 instanced geometry
    struct {
      UINT Spawns;
      UINT Spawns;
      FLOAT Spawn_Affects;
    } SPAWN_EFFECTS; 
    
    FLOAT MN; // time
    
    struct {
      FLOAT EmiStart; // time    
      FLOAT EmiStop; // time
    } PARTICLE_TIMING;
    
    UINT MN;

    if (particleType == 2) {
      UINT FragmentsCount; 
         
      typedef struct {
        struct {
            FLOAT MN;  
            FLOAT MN; 
            FLOAT MN;  
            FLOAT MN; 
            FLOAT MN;  
            FLOAT MN; 
            FLOAT MN;  
            FLOAT MN; 
            FLOAT MN;  
            FLOAT MN; 
            FLOAT MN; 
            FLOAT MN;  
            FLOAT MN; 
         } Some;
             UINT Count;
         FOHEADER F1;
         struct {
              UINT Length;  
              char Text[Length];  
         } ObjectProperties;   
         struct { 
             struct { 
                FLOAT x;        
                FLOAT y;
                FLOAT z;
              } XAxis;
               struct { 
                FLOAT x;
                FLOAT y;
                FLOAT z;
              } YAxis;
              struct {
                FLOAT x;
                FLOAT y;
                FLOAT z;
              } ZAxis;
              struct {
                FLOAT Y;
                FLOAT X;
                FLOAT Z;
              } Position;
          } TRANSFORMATION_MATRIX;
         UINT Count; 
         FOHEADER F2;
         BYTE A;
      } FRAGMENT <name="Fragment object">;
      struct { 
        FRAGMENT frg[FragmentsCount] <optimize=false>;
      } Array <name="Fragment object Array">;
      UINT Count;
      if (Count) {
         FLOAT MN;
         FLOAT MN;
         FLOAT MN;
         FLOAT MN;
         FLOAT MN;
         FLOAT MN;
         FLOAT MN;
         FLOAT MN;
         FLOAT MN;
         FLOAT MN;
      };
    }
    else {
      struct {
        UINT UseTotal; // * PercentageOfParticles
      } PARTICLE_QUANTITY;

      BYTE MN; 
      if (MN > 0) {
          UINT Length;   
          char TextureName[Length];
      } 
      UINT A;
      if (A > 0) {
        SPACE_WARPS SpaceWarps;
      }
    }
} PARTICLE_NODE_PROPERTIES;

typedef struct {
    struct {
      UINT n1;
      UINT n2;
      UINT n3;
      FLOAT n4; 
      UINT16 n5;
      UINT n6; 
      UINT16 n7; 
      UINT n8;  
      BYTE n9;
      BYTE n10; 
      UBYTE A;     
    } Prop;
    
    UINT PKeysCount;
    
    typedef struct {
        UINT n1;
        FLOAT n2;
        FLOAT Time;
        FLOAT X;          
        FLOAT Y;
        FLOAT Z;    
    } PositionKey;       
    typedef struct (int arraySize) {
      PositionKey array[arraySize] <optimize=false>;
    } PositionKeysArray;     
     PositionKeysArray POBPositionKeysArray(PKeysCount);
    
    UINT RKeysCount;
    typedef struct {
        UINT X;
        UINT Y;
        UINT Z;
        FLOAT Angle;          
        FLOAT n5;
        FLOAT n6; 
        FLOAT n7;          
        FLOAT n8;
        FLOAT n9; 
        FLOAT n10;
    } RotationKey;    
    typedef struct (int arraySize) {
      RotationKey array[arraySize] <optimize=false>;
    } RotationKeysArray;     
    RotationKeysArray POBRotationKeysArray(RKeysCount);
} ANIMATION_PROPERTIES;

typedef struct{
    UINT X;
    UINT Y;
    UINT Z;
    UINT A;
    FLOAT MN;          
    FLOAT MN;
    FLOAT MN; 
    FLOAT MN;          
    FLOAT MN;
    FLOAT MN; 
    FLOAT MN;          
    FLOAT MN;
    FLOAT MN; 
    FLOAT MN;          
    FLOAT MN;
    FLOAT MN; 
    FLOAT MN; 
    FLOAT MN;
    BYTE A;
} LIGHT_NODE_PROPERTIES;

void NodesTree(UINT NodeCount)
{   
  typedef struct { 
      struct { 
        UINT SectionSize;
        UINT MN;
        struct {    
            UINT Length; // 1
            char Text[Length]; //
            UINT Value;
        } VERSION;  
    
        struct {    
            UINT Length; // 
            char Text[Length]; //
        } NAME_STRING;         
      } HEADER <name = "Node header">;

     switch (HEADER.SectionSize) {
         case 1: 
           BYTE Empty;
           break;
         default : 
        
          if (HEADER.MN != 51 && HEADER.MN != 53) {
                  struct {
                      UINT Length;  
                      char Text[Length];  
                  } ObjectProperties <name = "Tagging properties">;   
          };
          struct { 
             struct { 
                FLOAT x;        
                FLOAT y;
                FLOAT z;
              } XAxis;
               struct { 
                FLOAT x;
                FLOAT y;
                FLOAT z;
              } YAxis;
              struct {
                FLOAT x;
                FLOAT y;
                FLOAT z;
              } ZAxis;
              struct {
                FLOAT Y;
                FLOAT X;
                FLOAT Z;
              } Position;
          } TRANSFORMATION_MATRIX;

         if (HEADER.MN != 47) {
             if (HEADER.MN == 51) {
                 PARTICLE_NODE_PROPERTIES ParticleProperties <name="Particle properties">;
             }
             else 
             if (HEADER.MN == 53) {
                 LIGHT_NODE_PROPERTIES SpotProperties <name="Spot properties">;
             }
             else {      
                 ANIMATION_PROPERTIES AnimationProperties <name="Animation properties">;  
             };
         };
              
           UINT SubeNodeCount;
           if (SubeNodeCount > 0) {
               NodesTree(SubeNodeCount);
           } 
         } 
   
  } NODE <name=NodeName>;

  typedef struct (int arraySize) {
    NODE array[arraySize] <optimize=false>;
  } NODE_ARRAY; 
        
  NODE_ARRAY POBNodesArray(NodeCount) <name="Child nodes">;
};

string NodeName(NODE &node) { 
    local string NodeType;
    switch (node.HEADER.MN) {
         case 46: NodeType = "Empty"; break;
         case 47: NodeType = "Group"; break;
         case 51: NodeType = "Light"; break;
         case 53: NodeType = "Particle"; break;
         default: NodeType = "Animation"; break;
    };
    return "Name: " + node.HEADER.NAME_STRING.Text + " [" + NodeType + "]";
}  

struct {
  struct { 
    UINT SectionSize;
    UINT MN;
    struct {    
       UINT Length; // 
       char Text[Length]; //
      UINT Value;
    } VERSION; 
    struct {
      UINT Length; // 
      char Text[Length]; // 
    } OBJECTLIST_TRING;
  } HEADER <name="ObjectList section header">;  

  struct {
    UINT NodeCount; 
    struct {
      UINT SectionSize;
      UINT MN;
      struct {    
        UINT Length; // 
        char Text[Length]; //
        UINT Value;
      } VERSION;  
      struct {
        UINT Length; // 
        char Text[Length]; // 
      } NAME_STRING;
    } HEADER <name="Root node header">; 
    NodesTree(NodeCount);
  } NODE_TREE <name="Root node">;
} OBJECTLIST <name="3. ObjectList section">;

struct {
  UINT Length;
  char Text[Length]; 
} ENDPOB_STRING <name="POB File End">;
//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: SOB.bt
//   Authors: Alexandr Evdokimov
//   Version: 0.5
//   Purpose: Rainbow six .sob file format
// File Mask: .sob
// 
//   History: 
//
//   2018.04 v0.6 
//   2016    v0.5 initial release
//------------------------------------------------

struct {
  UINT Length; // 
  char Text[Length]; // 
} BEGINMODEL_STRING <name="BEGINMODEL">;

typedef struct {
  struct {
    UINT SectionSize;
    UINT ID; // 8   
    UINT Length;
    if (Length == 8) {
      char Text[Length]; //
      if (Text == "Version") {
        UINT value;
        struct {    
          UINT Length; // 
          char Text[Length]; //
        } MATERIALNAME_STRING <name="Material Name">;
      }; 
    }
    else {
      struct {
        char Text[Length] <name="Material Name">; // 
      } MATERIALNAME_STRING <name="Material Name">; 
    };
  } HEADER <name="Header">;

  struct {    
    UINT Length; // 
    char Text[Length]; //
 } MATERIALNAME_STRING <name="Texture FileName">; 

  struct { 
    FLOAT Opacity;
    FLOAT MN;
    UINT mn;
    struct {              
      UINT Red; //
      UINT Green; //
      UINT Blue; //
    } Ambient; 
    struct {           
      UINT Red; //
      UINT Green; //
      UINT Blue; //
    } Diffuse;   
    struct { 
      UINT Red; //
      UINT Green; //
      UINT Blue; //
    } Specular;
    FLOAT SpecularLevel; //o.o5
    BYTE twoSided;
  } Properties;
} MATERIAL <name=MaterialName>;

string MaterialName(MATERIAL &material) {
  return "Name: " + material.HEADER.MATERIALNAME_STRING.Text + " ";
} 

struct {  
  struct { 
    UINT SectionSize;
    UINT ID; //8
    struct {
      UINT Length; // 
      char Text[Length]; // 
    } MATERIALLIST_STRING;
  } HEADER <name="1.0 MaterialList section header">;
    
  struct {
    UINT Count <name="Materials Count">;

    typedef struct (int arraySize) {
      MATERIAL array[arraySize] <optimize=false>;
    } MATERIAL_ARRAY; 

    MATERIAL_ARRAY MaterialArray(Count) <name="Material Array">; 
  } Materials <name="1.1 Materials section">;

} MATERIALLIST <name="MaterialList section">;


typedef struct {
     struct { 
       UINT SectionSize;
       UINT ID; // 7   
       UINT Length; // 
       if (Length == 8) {
          char Text[Length]; //
          if (Text == "Version") {
            UINT version; 
            struct {
              UINT Length;  
              char Text[Length]; 
            } OBJECT_NAME;
            UINT MN; // 0
            UINT MN; // 0
          };
       } else {
         struct {
           char Text[Length]; 
         } OBJECT_NAME;
       }
     } HEADER <name="Object Header">;  

    struct {
      UINT VertexCount;  
      typedef struct {     
        FLOAT X;
        FLOAT Y;
        FLOAT Z;
       } Vertex <name="Vertex">;    
      typedef struct (int arraySize) {
        Vertex array[arraySize];
      } VERTEX_ARRAY;     
      VERTEX_ARRAY VertexArray(VertexCount) <name="Vertex array">; 
    } VERTICES <name="Vertices">;

    struct {
       UINT Count; 
       typedef struct {
         struct {
           FLOAT MN;
           FLOAT MN;
           FLOAT MN;
           FLOAT MN;
         } NORMALS;
         struct {
           FLOAT U;
           FLOAT V;
         } UV;
         struct {
           UINT Red;
           UINT Green;
           UINT Blue;
         } Color;
        } AA <name="Vertex">;
       typedef struct (int arraySize) {
         AA array[arraySize] <optimize=false>;
       } AA_ARRAY ;
       AA_ARRAY AAArray(Count) <name="data array">; 
     } NORMALS_ARRAY <name="Vertex Normals | UV coordinates">;

     struct {
       UINT Count <name = "Face Count">; 
       typedef struct {     
         struct {
           UINT MN;
           UINT MN;
           UINT MN;
         } Face_Index;
         struct {
           UINT MN;
           UINT MN;
           UINT MN;
         } Texture_Index;
         struct {
           struct {
             FLOAT MN;
             FLOAT MN;
             FLOAT MN;
             FLOAT MN;
           } FACE_NORMAL;
           UINT MaterialIndex;
         } Properties;
       } Face <name = "Face">;
       typedef struct (int arraySize) {
          Face array[arraySize] <optimize=false>;
       } Face_ARRAY;
       Face_ARRAY FaceArray(Count) <name="Face array">; 
     } TEXTURE_DATA <name="Indexes">;

    struct {
    UINT Count; 
    typedef struct  { 
       UINT Count; 
       struct {
         UINT Length; // 
         char Text[Length]; // 
       } String <name="String">; 

       UINT Count; 
       typedef struct {  
         UINT Index; 
       } CC;
       typedef struct (int arraySize) {
          CC array[arraySize] <optimize=false>;
       } CC_ARRAY;
       CC_ARRAY CCArray(Count) <name="Face indexes">; 

       UINT Count; 
       typedef struct {  
         UINT Index; 
       } DD;
       typedef struct (int arraySize) {
          DD array[arraySize] <optimize=false>;
       } DD_ARRAY;
       DD_ARRAY DDArray(Count) <name="Texture indexes">; 

       UINT Count; 
       struct {
         UINT Length; // 
         char Text[Length]; // 
       } String <name="String">;      
       UINT Count;       
    } MM;

    typedef struct (int arraySize) {
      MM array[arraySize] <optimize=false>;
    } MM_ARRAY;
    MM_ARRAY MMArray(Count) <name="Indexes array">; 
    }  IND <name="Params">; 
} DATA <name=ObjectName>;  

string ObjectName(DATA &data) {
  return "Name: " + data.HEADER.OBJECT_NAME.Text + " ";
} 

struct {   

  struct { 
    UINT SectionSize;
    UINT ID; // 7
    struct {
      UINT Length;  
      char Text[Length];  
    } GEOMETRYLIST_STRING;
  } HEADER <name="GeometryList Header">;  

 UINT Count <name="Object Count">;

 struct {
  

    typedef struct (int arraySize) {
      DATA array[arraySize] <optimize=false>;
    } GEOMETRY_DATA_ARRAY; 

    GEOMETRY_DATA_ARRAY GeometryDataArray(Count) <name="Object geometry data array">; 

   } SOB_GEOMETRY_DATA <name="Geometry data">; 
}  GEOMETRYLIST  <name="GeometryList Section">;

struct {
  UINT Length; // 
  char Text[Length]; // 
} EndModelString <name="ENDMODEL">;
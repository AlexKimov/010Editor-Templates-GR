//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: QOB(LD).bt
//   Authors: Alexander Evdokimov
//   Version: 0.1
//   Purpose: Rainbow Six Lockdown QOB file
//
//   History: 
//   
//   2018.05 v0.1
//   
//------------------------------------------------

typedef enum <ubyte> {
    no,
    yes
} BOOL; // bool data type

struct {
    UINT Length;  
    char String[Length];  
} Begin_Model_String <name="BeginModel">; 

typedef struct {
  struct {
    UINT SectionSize;
    UINT ID; // 2
    struct {    
      UINT Length; // 
      char Text[Length]; //
      UINT Value;
    } VERSION; 
    struct {    
       UINT Length; // 
       char Text[Length]; //
    } MATERIAL_NAME_STRING <name="Material Name">; 
  } HEADER <name="Material Section Header">;
  struct { 
    FLOAT Opacity;
    FLOAT isFaceted;
    struct {              
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue; //
      FLOAT mn;
    } AMBIENT; 
    struct {           
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue; //
      FLOAT mn;
    } DIFFUSE;   
    struct { 
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue; //
      FLOAT mn;
    } SPECULAR;
    FLOAT SpecularLevel; //o.o5
    BOOL twoSide;

    if (HEADER.VERSION.Value == 6) {
      UINT MN;
      FLOAT MN;
      UINT MN;
      UINT MN;
      UINT MN;
      UINT MN;
      BYTE A;
    }; 

    if (HEADER.VERSION.Value == 5) {
      UINT MN;
      FLOAT MN;
    }; 

    if (HEADER.VERSION.Value == 11) { 
      BYTE A[40];
    };   
  } PARAMETRES;
} MATERIAL <name=MaterialName>;

typedef struct {
  struct {
    UINT SectionSize;
    UINT ID; // 38
    struct {    
      UINT Length; 
      char Text[Length]; 
      UINT Value;
   } VERSION; 
    struct {    
       UINT Length;  
       char Text[Length]; 
    } TEXTURENAME_STRING <name="Texture Name">; 
  } HEADER <name="Textures section header">;

  BOOL mn;

  struct {    
     UINT Length;  
     char Text[Length]; 
  } TEXTURE_FILENAME_STRING <name="Texture .rsb file name">; 
  
  struct { 
    UINT AdvTransparencyType;  // 0 2 3
    UINT isTiled; // 1 - u tiled, 2 - v tiled, 3 - both none
    FLOAT SelfIllumination; // 0
    if (HEADER.VERSION.Value == 6) {
      FLOAT MN;
      BYTE A;
      BYTE B;
    }; 
    if (HEADER.VERSION.Value == 4) {
      BYTE A;
      BYTE B;
    };    
  } PARAMETERS; 
} TEXTURE <name=TextureName>;

string MaterialName(MATERIAL &material) {
  return "Name: " + material.HEADER.MATERIAL_NAME_STRING.Text + " ";
} 

string TextureName(TEXTURE &texture) {
  return "FileName: " + texture.TEXTURE_FILENAME_STRING.Text + " ";
} 

struct {  
  struct { 
    UINT SectionSize;
    UINT MN; // 8
    struct {    
      UINT Length; // 
      char Text[Length]; //
      UINT Value;
    } VERSION; 

    struct {
      UINT Length; // 
      char Text[Length]; // 
    } MATERIALLIST_STRING;
  } HEADER <name="1.0 MaterialList section header">;
    
  struct {
    UINT Count <name="Materials Count">;

    typedef struct (int arraySize) {
      MATERIAL array[arraySize] <optimize=false>;
    } MATERIAL_ARRAY; 

    MATERIAL_ARRAY MaterialArray(Count) <name="Material Array">; 
  } MATERIALS <name="1.1 Materials section">;

  struct {
    UINT Count <name="Textures Count">;
     if (Count > 0) {

        typedef struct (int arraySize) {
          TEXTURE array[arraySize] <optimize=false>;
        } TEXTURE_ARRAY; 
    
        TEXTURE_ARRAY TextureArray(Count) <name="Textures Array">; 
    };
  } TEXTURES <name="1.2 Textures section">;

} QOBMATERIALLIST <name="1. MaterialList section">;

//--------------------
// QOBGEOMETRYLIST
// --------------------

struct {   

  struct { 
    UINT SectionSize;
    UINT MN; // 7
    struct {    
       UINT Length; 
       char String[Length]; 
      UINT number; // 1
    } VERSION_STRING; 

    struct {
      UINT Length;  
      char Text[Length];  
    } GEOMETRYLIST_STRING;
  } HEADER <name="GeometryList Header">;  

 UINT Count <name="Object Count">;

 struct {

 typedef struct { 
    //  section header 
    struct { 
      UINT SectionSize;
      UINT ID; // 3
      struct {    
        UINT Length;  
        char String[Length]; 
        UINT number; // 1
      } VERSION_STRING; 

      struct {
        UINT Length;  
        char Text[Length];  
      } NAME_STRING;
    } SECTION_HEADER <name="Section header">; 

    if (SECTION_HEADER.VERSION_STRING.number == 27) {
      BYTE A;
      UINT MN;
      UINT MN;
      FLOAT B; 
    } else
    if (SECTION_HEADER.VERSION_STRING.number != 8) {
      BYTE A;
      FLOAT B; 
      BYTE C;
      FLOAT MN;
    };

    BYTE DarkMapped <name="DarkMapped">; // 
    BYTE CastShadows  <name="CastShadows">;

    struct {
      UINT VertexCount;  
      typedef struct {     
        FLOAT X;
        FLOAT Y;
        FLOAT Z;
       } Vertex;    
      typedef struct (int arraySize) {
        Vertex array[arraySize];
      } VERTEX_ARRAY;     
      VERTEX_ARRAY VertexArray(VertexCount) <name="Vertex array">; 
    } VERTICES <name="Vertex section">;

    UINT Count <name="Object Count">;  //
    typedef struct {
        struct {
          UINT MN;
          UINT MN; // 1
          BYTE DetailedDarkmap;
          BYTE DetailTexture;
          BYTE MN;
          UINT MaterialIndex;
          UINT isTextured;
          if (isTextured > 0) {
            UINT TextureIndex;
            if (DetailTexture > 0) {
               UINT DetailTextureIndex;
            };
          };
          struct {
            UINT MN;     
            UINT SelfIlluminationMap;
            UINT SpecularMap;
            UINT BumpMap;
            UINT ReflectionMap;
            UINT MN;
            UINT MN;
            UINT MN;
            UINT MN;
            UINT MapCount;
          } MAPPING;
       } PARAMETERS;

       UINT MN;    
       UINT A;
  
       struct {
          UINT FCount;
          UINT FaceCount;           

          typedef struct {     
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
            FLOAT MN;
           } FACE_NORMALS;
    
          typedef struct (int arraySize) {
            FACE_NORMALS array[arraySize];
          } FACE_NORMALS_ARRAY;
         
          FACE_NORMALS_ARRAY FacesNormalsArray(FCount);
        
          typedef struct  {
            UINT MN;
          } FACE_INDICIES;
    
          typedef struct (int arraySize) {
            FACE_INDICIES array[arraySize];
          } FACE_INDICIES_ARRAY;
          
          FACE_INDICIES_ARRAY FaceIndiciesArray(FaceCount);

          if (SECTION_HEADER.VERSION_STRING.number != 27) {    
            UINT16 Count;
            BYTE F[Count];
          };

          typedef struct  {
            UINT16 Vertice1;
            UINT16 Vertice2;
            UINT16 Vertice3;
          } TEXTURE_INDICIES;
    
          typedef struct (int arraySize) {
            TEXTURE_INDICIES array[arraySize];
          } TEXTURE_INDICIES_ARRAY;
          
          TEXTURE_INDICIES_ARRAY TextureIndiciesArray(FCount);   
        } Faces <name="Faces">;
    
      struct {
        UINT VertexCount;
        UINT TextureCount;

        struct {
            UINT16 A;
        } S[VertexCount];   
         
        typedef struct   {
          FLOAT X;
          FLOAT Y;
          FLOAT Z;
        } QOBNORMALSCOORDINATES;
         
        typedef struct (int arraySize) {
          QOBNORMALSCOORDINATES array[arraySize];
        } QOBNORMALSCOORDINATESARRAY;
        
        QOBNORMALSCOORDINATESARRAY NormalsCoordinatesArray(VertexCount);
         
        typedef struct   {
          FLOAT U;
          FLOAT V;
        } QOBTEXTURECOORDINATES;
        
        typedef struct (int arraySize) {
           QOBTEXTURECOORDINATES array[arraySize];
        } QOBTEXTURECOORDINATESARRAY;
        
        QOBTEXTURECOORDINATESARRAY TextureCoordinatesArray(VertexCount*TextureCount); 
          
          typedef struct   {
            FLOAT MN;  //  
            //Check(MN, 1, " value");
          } FACE_COLOR <name="Face RGB color">; 
          typedef struct (int arraySize) {
           FACE_COLOR array[arraySize] <optimize=false>;
          } FACE_COLOR_ARRAY; 
          FACE_COLOR_ARRAY CoordinatesArray(VertexCount) <name="Faces color array">; 

      } TEXTUREVERTICIES <name="Texture data">;   
    } GEOMETRY_OBJECT;

    typedef struct (int arraySize) {
      GEOMETRY_OBJECT array[arraySize] <optimize=false>;
    } GEOMETRY_OBJECT_ARRAY; 
    
    GEOMETRY_OBJECT_ARRAY GeometryObjectArray(Count) <name="Object geometry data array">; 

 } GEOMETRY_DATA;  

  typedef struct (int arraySize) {
    GEOMETRY_DATA array[arraySize] <optimize=false>;
  } GEOMETRY_DATA_ARRAY; 

  GEOMETRY_DATA_ARRAY GeometryDataArray(Count) <name="Object geometry data array">; 

 } QOB_GEOMETRY_DATA <name="Geometry data section">;
  
} QOBGEOMETRYLIST  <name="2. GeometryList Section">;

UINT PointCount;
BYTE A;

struct {
  UINT Length;
  char String[Length]; 
} ENDMODEL_STRING <name="EndModel">;
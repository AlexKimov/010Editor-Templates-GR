//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: CHR.bt
//   Authors: AlexKimov
//   Version: 1.0
//   Purpose: Ghost Recon CHR file
//
//   History: 
//
//   2018.04 v1.0  
//   2017.01 v0.9 current version 
//   2016.12 v0.4 initial release
//------------------------------------------------

time_t ModifiedDate <name="CHR File Modified Date">;

struct {
  UINT Length; // 
  char Text[Length]; // 
} BEGINMODEL_STRING <name="BEGINMODEL signature">;

typedef struct {
  struct {
    UINT SectionSize;
    UINT ID;
    struct {    
      UINT Length; // 
      char Text[Length]; //
      UINT value;
    } VERSION; 
    struct {    
       UINT Length; // 
       char Text[Length]; //
    } MATERIALNAME_STRING <name="Material Name">; 
  } HEADER <name="Section header">;
  struct { 
    FLOAT Opacity;
    UINT Faceted;
    struct {              
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue; //
      FLOAT mn;
    } Ambient; 
    struct {           
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue; //
      FLOAT mn;
    } Diffuse;   
    struct { 
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue; //
      FLOAT mn;
    } Specular;
    FLOAT SpecularLevel; //o.o5
    BYTE twoSided;
  } Properties;
} MATERIAL <name=MaterialName>;

typedef struct {
  struct {
    UINT SectionSize;
    UINT MN;
    struct {    
      UINT Length; // 
      char Text[Length]; //
      UINT Value;
   } VERSION; 
   struct {    
      UINT Length; // 
      char Text[Length]; //
   } TEXTURE_NAME_STRING <name="Texture Name">; 
  } HEADER <name="Textures section HEADER">;

  BYTE mn; // 0

  struct {    
     UINT Length; // 
     char Text[Length]; //
  } TEXTURE_FILENAME <name="Texture .rsb file name">; 
  
  struct { 
    UINT AdvTransparencyType;  // 0 2 3
    UINT Tiled; // 1 - u tiled, 2 - v tiled, 3 - both none
    FLOAT SelfIllumination; // 0..1
  } PARAMETERS; 
} TEXTURE <name=TextureName>;

string MaterialName(MATERIAL &material) {
  return "Name: " + material.HEADER.MATERIALNAME_STRING.Text + " ";
} 

string TextureName(TEXTURE &texture) {
  return "FileName: " + texture.TEXTURE_FILENAME_STRING.Text + " ";
} 

struct {  
  struct { 
    UINT SectionSize;
    UINT ID; // 8
    struct {    
      UINT Length; // 
      char Text[Length]; //
      UINT value;
    } VERSION; 

    struct {
      UINT Length; // 
      char Text[Length]; // 
    } MATERIALLIST_STRING;
  } HEADER <name="1.0 MaterialList section header">;
    
  struct {
    UINT Count <name="Materials Count">;

    typedef struct (int arraySize) {
      MATERIAL array[arraySize] <optimize=false>;
    } MATERIAL_ARRAY; 

    MATERIAL_ARRAY MaterialArray(Count) <name="Material Array">; 
  } Materials <name="1.1 Materials section">;

  struct {
    UINT Count <name="Textures Count">;
    if (Count > 0) {    
        typedef struct (int arraySize) {
          TEXTURE array[arraySize] <optimize=false>;
        } TEXTURE_ARRAY; 
        TEXTURE_ARRAY TextureArray(Count) <name="Textures Array">; 
    };
  } Textures <name="1.2 Textures section">;
} CHRMATERIALLIST <name="1. MaterialList section">;

struct {   

  struct { 
    UINT SectionSize;
    UINT ID; // 7
    struct {    
      UINT Length; 
      char String[Length]; 
      UINT value; // 1
    } VERSION; 

    struct {
      UINT Length;  
      char Text[Length];  
    } GEOMETRYLIST_STRING;
  } HEADER <name="GeometryList Header">;  

 UINT Count <name="Model Count">;

 typedef struct { 
    //  section header 
    struct { 
      UINT SectionSize;
      UINT ID; // 3
      struct {    
        UINT Length;  
        char String[Length]; 
        UINT value; // 1
      } VERSION; 
      struct {
        UINT Length;  
        char Text[Length];  
      } NAME_STRING;
    } SECTION_HEADER <name="Section header">; 

    BYTE DarkMapped <name="DarkMapped">; // 
    BYTE CastShadows  <name="CastShadows">;

    struct {
      UINT VertexCount;  
      typedef struct {     
        FLOAT X;
        FLOAT Y;
        FLOAT Z;
       } Vertex <name="Vertex">;    
      typedef struct (int arraySize) {
        Vertex array[arraySize];
      } VERTEX_ARRAY;     
      VERTEX_ARRAY VertexArray(VertexCount) <name="Vertex array">; 
    } VERTICES <name="Model Vertices">;

    UINT Count <name="Meshes Count">;  //
    typedef struct {
      struct {
          BYTE mn; // 1
          BYTE DetailedDarkmap;
          BYTE DetailTexture;
          UINT MaterialIndex;
          UINT isTextured;
          if (isTextured > 0) {
            UINT TextureIndex;
            if (DetailTexture > 0) {
               UINT DetailTextureIndex;
            };
          };
          struct {
            UINT MN;     
            UINT SelfIlluminationMap;
            UINT SpecularMap;
            UINT BumpMap;
            UINT ReflectionMap;
            UINT MapCount;
          } MAPPING;
      } PARAMETERS;
    
      struct {
          UINT FaceCount; 
    
          typedef struct {     
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
            FLOAT DistanceOriginFace;
           } FACE_NORMALS;
    
          typedef struct (int arraySize) {
            FACE_NORMALS array[arraySize];
          } FACE_NORMALS_ARRAY;
          
          FACE_NORMALS_ARRAY FaceNormalsArray(FaceCount);
        
          typedef struct  {
            UINT16 Vertex1;
            UINT16 Vertex2;
            UINT16 Vertex3;
          } FACE_INDICIES;
    
          typedef struct (int arraySize) {
            FACE_INDICIES array[arraySize];
          } FACE_INDICIES_ARRAY;
          
          FACE_INDICIES_ARRAY FaceIndiciesArray(FaceCount);
    
          typedef struct  {
            UINT16 Vertex1;
            UINT16 Vertex2;
            UINT16 Vertex3;
          } TEXTURE_INDICIES;
    
          typedef struct (int arraySize) {
            TEXTURE_INDICIES array[arraySize];
          } TEXTURE_INDICIES_ARRAY;
          
          TEXTURE_INDICIES_ARRAY TextureIndiciesArray(FaceCount);    
      } Faces <name="Faces">;
    
      struct {  
        UINT VertexCount;
        UINT TextureCount;
          
        typedef struct   {
          FLOAT X;
          FLOAT Y;
          FLOAT Z;
        } CHRNORMALSCOORDINATES;
         
        typedef struct (int arraySize) {
          CHRNORMALSCOORDINATES array[arraySize];
        } CHRNORMALSCOORDINATESARRAY;
        
        CHRNORMALSCOORDINATESARRAY NormalsCoordinatesArray(VertexCount);
         
        typedef struct   {
          FLOAT U;
          FLOAT V;
        } TEXTURE_UV;
        
        typedef struct (int arraySize) {
           TEXTURE_UV array[arraySize];
        } TEXTURE_UV_ARRAY;
        
        TEXTURE_UV_ARRAY TextureCoordinatesArray(VertexCount*TextureCount); 
          
          typedef struct   {
            FLOAT Red;  // 0..1 (0..255 in RGB)
            FLOAT Green;  
            FLOAT Blue;  
            FLOAT MN; // 
          } FACE_COLOR <name="Face RGB color">; 
          typedef struct (int arraySize) {
           FACE_COLOR array[arraySize] <optimize=false>;
          } FACE_COLOR_ARRAY; 
          FACE_COLOR_ARRAY ColorMapArray(VertexCount) <name="Faces color array">;        

      } TEXTUREVERTICIES <optimize=false,name="Texture data">;   
    } GEOMETRY_OBJECT <name="Mesh">;

    typedef struct (int arraySize) {
      GEOMETRY_OBJECT array[arraySize] <optimize=false>;
    } GEOMETRY_OBJECT_ARRAY; 
    
    GEOMETRY_OBJECT_ARRAY GeometryObjectArray(Count) <optimize=false,name="Mesh array">; 

 } GEOMETRY_DATA <name="Model">;  

  typedef struct (int arraySize) {
    GEOMETRY_DATA array[arraySize] <optimize=false>;
  } GEOMETRY_DATA_ARRAY; 

  GEOMETRY_DATA_ARRAY GeometryDataArray(Count) <name="Objects array">; 
} CHRGEOMETRYLIST  <name="2. GeometryList Section">;

UINT MN; //0

struct {
  UINT Length; // 
  char Text[Length]; // 
} EndModelString <name="Model section end">;
    
typedef struct { 
  struct {
    UINT ID; // 37
    struct {    
       UINT Length; 
       char Text[Length]; 
       UINT value; // 1
    } VERSION_STRING; 
    struct {
      UINT Length;  
      char Text[Length];  
    } BONE_NAME_STRING;
  } SECTION_HEADER;
  struct {
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
  } POSITION;
  struct {
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
    FLOAT Angle; 
  } ROTATION;
  FLOAT MN; // 0
  UINT Connections;  
} BONE <name=BoneName>;

// BoneName function 
string BoneName(BONE &bone) {
  return "Name: " + bone.SECTION_HEADER.BONE_NAME_STRING.Text;
} 

struct {
  typedef struct (int arraySize) {
    BONE array[arraySize] <optimize=false>;
  } BONE_ARRAY;

  BONE_ARRAY CHRBoneArray(21) <name="Bones array">;

  struct {
    struct {
    struct {
      UINT Length;  
      char Text[Length];  
    } SKIN; 
    UINT ID; // 1
    struct {
      UINT Length;  
      char Text[Length];  
    } BODY_NAME;
   } Header <name = "Header">;   

    UINT VertexCount;
    typedef struct {
      UINT VertexIndex;
      UINT BonesCount;
      if (BonesCount > 0) {
        typedef struct {
          UINT Length;  
          char Text[Length];
          FLOAT BoneWeight;  
        } BONES;           
        BONES BonesArray[BonesCount] <optimize=false>;
      };     
    } VERTEX_WEIGHT <name = "Vertex Weight" >;   
    typedef struct (int arraySize) {
      VERTEX_WEIGHT array[arraySize] <optimize=false>;
    } VERTEX_WEIGHT_ARRAY;
    VERTEX_WEIGHT_ARRAY VertexWeightArray(VertexCount) <name="Vertex Weight Array", optimize=false>;

  } WEIGHT_TABLE <name="Weight Table">;
  
} Bones <name="3. Model bones section">;
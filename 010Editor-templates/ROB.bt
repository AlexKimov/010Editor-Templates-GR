//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: ROB.bt
//   Authors: Alexander Evdokimov
//   Version: 0.5
//   Purpose: Rainbow Six Rogue Spear ROB file 
// File Mask: *.rob
//
//   History: 
//   2017 v0.5 initial release
//------------------------------------------------

struct {
  UINT Length; // 
  char Text[Length]; // 
} BEGINMODEL_STRING <name="BEGINMODEL">;

typedef struct {
  struct {
    UINT SectionSize;
    UINT MN;

      struct {    
        UINT Length; // 
        char Text[Length]; //
        UINT value;
      } VERSION; 

    struct {    
       UINT Length; // 
       char Text[Length]; //
    } MATERIALNAME_STRING <name="Material Name">; 
  } HEADER <name="Header">;

  struct {    
    UINT Length; // 
    char Text[Length]; //
 } MATERIALNAME_STRING <name="Texture FileName">; 

  struct { 
    FLOAT Opacity;
    FLOAT SelfUllimination;
    
    UINT MN; // 0 - faceted, 1 - ?
    struct {            
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue; //
      FLOAT mn; // 1
    } Ambient; 
    struct {      
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue;  //
      FLOAT MN; // 1
    } Diffuse;   
    struct { 
      FLOAT Red; //
      FLOAT Green; //
      FLOAT Blue; //
      FLOAT MN; // 1
    } Specular;
    FLOAT SpecularLevel; //
    BYTE twoSided;
  } Properties;
} MATERIAL <name=MaterialName>;

string MaterialName(MATERIAL &material) {
  return "Name: " + material.HEADER.MATERIALNAME_STRING.Text + " ";
} 

struct {  
  struct { 
    UINT SectionSize;
    UINT MN;
    struct {
      UINT Length; // 
      char Text[Length]; // 
    } MATERIALLIST_STRING;
  } HEADER <name="1.0 MaterialList section header">;
    
  struct {
    UINT Count <name="Materials Count">;

    typedef struct (int arraySize) {
      MATERIAL array[arraySize] <optimize=false>;
    } MATERIAL_ARRAY; 

    MATERIAL_ARRAY MaterialArray(Count) <name="Material Array">; 
  } Materials <name="1.1 Materials section">;

} MATERIALLIST <name="MaterialList section">;


struct {   

  struct { 
    UINT SectionSize;
    UINT ID; // 7
    struct {
      UINT Length;  
      char Text[Length];  
    } GEOMETRYLIST_STRING;
  } HEADER <name="GeometryList Header">;  

 UINT Count <name="Object Count">;

 struct {

 typedef struct { 
    //  section header 
    struct { 
      UINT SectionSize;
      UINT MN; // 3
      struct {    
        UINT Length;  
        char String[Length]; 
        UINT value; // 1
      } VERSION_STRING; 

      struct {
        UINT Length;  
        char Text[Length];  
      } NAME_STRING;
    } SECTION_HEADER[2] <name="Header">; 

    struct {
      UINT VertexCount;  
      typedef struct {     
        FLOAT X;
        FLOAT Y;
        FLOAT Z;
       } Vertex;    
      typedef struct (int arraySize) {
        Vertex array[arraySize];
      } VERTEX_ARRAY;     
      VERTEX_ARRAY VertexArray(VertexCount) <name="Vertex array">; 
    } VERTICES <name="Vertices">;

    UINT MeshCount;  //
    typedef struct {
        struct {
          UINT MaterialIndex;
       } PARAMETERS;
    
       struct {
          UINT FaceCount; 
    
          typedef struct {     
            FLOAT X;
            FLOAT Y;
            FLOAT Z;
            FLOAT W;
           } FACE_NORMALS <name="Face Normal">;
    
          typedef struct (int arraySize) {
            FACE_NORMALS array[arraySize];
          } FACE_NORMALS_ARRAY;
          
          FACE_NORMALS_ARRAY FacesNormalsArray(FaceCount) <name="Normals">;
        
          typedef struct  {
            UINT16 Vertex1;
            UINT16 Vertex2;
            UINT16 Vertex3;
          } FACE_Indices <name="Face">;
    
          typedef struct (int arraySize) {
            FACE_Indices array[arraySize];
          } FACE_Indices_ARRAY;
          
          FACE_Indices_ARRAY FaceIndicesArray(FaceCount) <name="Face Indices">;
    
          typedef struct  {
            UINT16 Vertice1;
            UINT16 Vertice2;
            UINT16 Vertice3;
          } TEXTURE_Indices <name="Face">;
    
          typedef struct (int arraySize) {
            TEXTURE_Indices array[arraySize];
          } TEXTURE_Indices_ARRAY;
          
          TEXTURE_Indices_ARRAY TextureIndicesArray(FaceCount) <name="Texture Indices">;
    
        } Faces <name="Faces">;
    
      struct {  
        UINT VertexCount;
        //NT TextureCount;
          
        typedef struct   {
          FLOAT X;
          FLOAT Y;
          FLOAT Z;
        } ROBNORMALSCOORDINATES <name="Vertex Normal">;
         
        typedef struct (int arraySize) {
          ROBNORMALSCOORDINATES array[arraySize];
        } ROBNORMALSCOORDINATESARRAY;
        
        ROBNORMALSCOORDINATESARRAY NormalsCoordinatesArray(VertexCount) <name="Normals">;
         
        typedef struct   {
          FLOAT U;
          FLOAT V;
        } ROBTEXTURECOORDINATES;
        
        typedef struct (int arraySize) {
           ROBTEXTURECOORDINATES array[arraySize];
        } ROBTEXTURECOORDINATESARRAY;
        
        ROBTEXTURECOORDINATESARRAY TextureCoordinatesArray(VertexCount) <name="Texture coordinates">;; 
          
          typedef struct   {
            FLOAT Red;  // 0..1 (0..255 in RGB)
            FLOAT Green;  
            FLOAT Blue;  
            FLOAT MN;  
            //Check(MN, 1, " value");
          } FACE_COLOR <name="Face RGB color">; 
          typedef struct (int arraySize) {
           FACE_COLOR array[arraySize] <optimize=false>;
          } FACE_COLOR_ARRAY; 
          FACE_COLOR_ARRAY CoordinatesArray(VertexCount) <name="Vertex color">; 

      } TEXTUREVERTICIES <name="Vertices">;   
    } GEOMETRY_OBJECT <name="Mesh">;

    typedef struct (int arraySize) {
      GEOMETRY_OBJECT array[arraySize] <optimize=false>;
    } GEOMETRY_OBJECT_ARRAY; 
    
    GEOMETRY_OBJECT_ARRAY GeometryObjectArray(MeshCount) <name="Mesh array">; 

 } GEOMETRY_DATA;  

  typedef struct (int arraySize) {
    GEOMETRY_DATA array[arraySize] <optimize=false>;
  } GEOMETRY_DATA_ARRAY; 

  GEOMETRY_DATA_ARRAY GeometryDataArray(Count) <name="Object geometry data array">; 

 } ROB_GEOMETRY_DATA <name="Geometry data section">;

 struct {   
 UINT A;
 UINT B;

 UINT FaceCount;
 typedef struct {
   struct {
     UINT16 I1;
     UINT16 I2;
     UINT16 I3;
     UINT16 FaceIndex;
   } Face;
   UINT MN; // 0
   UINT MN;
 } CC; 
 typedef struct (int arraySize) {
   CC array[arraySize] <optimize=false>;
 } CC_ARRAY;

 CC_ARRAY CCArray(FaceCount) <name="Indexes">; 

 UINT A;
 struct {
   UINT Length;  
   char Text[Length];  
 } NAME_STRING;
 UINT B;
 
 UINT Count;
 UINT16 Index[Count] <name="Index">;
 } MeshData <name = "Meshes">;

} ROBGEOMETRYLIST  <name="2. GeometryList Section">;

struct {
  UINT Length;
  char String[Length]; 
} ENDMODEL_STRING <name="ENDMODEL">;

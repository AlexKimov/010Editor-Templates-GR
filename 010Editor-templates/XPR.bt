//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: XPR.bt
//   Authors: Alexander Evdokimov
//   Version: 0.8
//   Purpose: Red storm XPR file

//   History: 
//   2017.05 v0.1 first release
//------------------------------------------------

  struct {    
    local float size1 = 0, size2 = 0;
    local int i = 0; 
    local int width = 0, height = 0; 
    local int texelsize = 16;
  } vars <hidden = true>;

  BitfieldDisablePadding();

  struct {
    char XPRO[5]; // id
    UINT Size <name="Size?">;
    UINT16 B;
    UINT16 C;
    UINT D;
    UINT E;
    BYTE F[3];
    BYTE TN;
    BYTE Type; 
    unsigned byte mn: 4; 
    unsigned byte width: 4 <name="Width">; 
    BYTE height <name="Height">;
  } HEADER <name="File Header">;


  switch (HEADER.Type) {
    case 4: 
    case 5:
    case 6:
    case 7: 
      vars.texelsize = 1; 
      Printf("Type: B8G8R8A8"); 
      break;
    case 12: Printf("Type: DXT1"); break;
    case 14: 
    case 15:
    case 25: Printf("Type: DXT5"); break;
  };

  BYTE BOffset[2020] <hidden=true>;

  typedef struct {
      ubyte Blue <name="Blue">; 
      ubyte Green <name="Green">;
      ubyte Red <name="Red">;
      ubyte Alpha <name="Red">;    
  } BGRA_PIXEl;

  typedef struct {
      ubyte Red   : 5 <name="Red">;
      ubyte Green : 6 <name="Green">;
      ubyte Blue  : 5 <name="Blue">; 
  } COLOR <optimize=false, name="Color">;

  typedef struct {
      ubyte I: 4 <name="Index">;
  } ALPHA_INDEX <optimize=false>;

  typedef struct {
     ALPHA_INDEX AlphaIndex[16];
  } ALPHA_BLOCK <optimize=false, name="Alpha">;

  typedef struct {
        ubyte I: 2 <name="Index">;
  } COLOR_INDEX <optimize=false>;

  typedef struct {
    COLOR_INDEX ColorIndex[16];
  } COLOR_INDEXES <optimize=false, name="Indexes">;

  typedef struct {
    COLOR FirstColor;
    COLOR SecondColor;
    COLOR_INDEXES ColorIndexes;
  } DXT1;  

  typedef struct {
    ALPHA_BLOCK alphaBlock;
    COLOR FirstColor;
    COLOR SecondColor;
    COLOR_INDEXES ColorIndexes;
  } DXT5;  

  typedef struct { 
    switch (HEADER.Type) { 
      case 4:
      case 5: 
      case 6: 
      case 7: BGRA_PIXEl bgraPixel; break;
      case 12: DXT1 dxt1; break; 
      case 14: 
      case 15:
      case 25: DXT5 dxt5; break;
    };
  } TEXEL <name="Texel", optimize=false, size=texelSize>;

  int texelSize(TEXEL &texel) {
     if (HEADER.Type == 12) 
     return  8 ;
     if (HEADER.Type > 12) 
     return  16 ;
     if (HEADER.Type == 6 || HEADER.Type == 7) 
     return  4;
  };

  typedef struct (int arraySize) {
    TEXEL array[arraySize] <optimize=false>;
  } TEXEL_ARRAY;
 
 //if (HEADER.Type >= 12)
 struct {

    TEXEL_ARRAY TexelArray((1<<HEADER.width)*(1<<HEADER.height)/vars.texelsize) <name="Pixel Array",optimize=false>;
 } IMAGE_DATA <name="Image data">;
 
 Printf("Size %d*%d\n", (1<<HEADER.width), (1<<HEADER.height));

 if (HEADER.Type >= 12)
 struct {
    vars.size1 = (1 << HEADER.height)/2;
    vars.size2 = (1 << HEADER.width)/2;
    while ( true )
      {
       Printf("MM: %d*%d\n", vars.size1, vars.size2);
      
      if (vars.size1*vars.size2 >= 16) {
        TEXEL_ARRAY TexelArray(vars.size1*vars.size2/vars.texelsize) <name="Image Data 16", optimize=false>;
      } 
      else {
        TEXEL_ARRAY TexelArray(1) <name="Image Data", optimize=false>;
      };

      if (vars.size1 == 1 && vars.size2 == 1) break;
      if (vars.size1 > 1)
        vars.size1 = vars.size1 - vars.size1/2;
      if (vars.size2 > 1)
        vars.size2 = vars.size2 - vars.size2/2;
    } 
 } MIP_MAPS <name="Mip Maps data">;

  //BYTE EOffset[656] <hidden=true>;
//------------------------------------------------
// 010 Editor v7.0 Binary Template
//
//      File: POB.bt
//   Authors: Alexander Evdokimov
//   Version: 1.1
//   Purpose: Ghost Recon POB file 
// File Mask: *.pob
// 
//   History: 
//
//   2019.01 v1.1
//   2018.04 v1.0 
//   2016.12 v0.08 initial release
//------------------------------------------------

typedef enum <ubyte> {
  no = 0,
  yes = 1
} BOOL; // bool data type

typedef struct { 
  UINT Length;  
  char Text[Length];
} CSTRING; 

typedef struct {
  UINT SectionSize;
  UINT ID;
  struct {    
    CSTRING Name <name="Version">; 
    UINT Value;
  } VERSION;    
  CSTRING Name <name="Name">; 
} SECTION_HEADER <name="Header">;

typedef struct { 
  FLOAT x;
  FLOAT y;  
} POINT2;

typedef struct {     
  UINT16 x;
  UINT16 y;
  UINT16 z;
} VECTOR_SHORT3; 

typedef struct {     
  UINT16 x;
  UINT16 y;
  UINT16 z;
  UINT16 w;
} VECTOR_SHORT4; 

typedef struct {     
  FLOAT x;
  FLOAT y;
  FLOAT z;
} VECTOR3; 

typedef struct {     
  FLOAT x;
  FLOAT y;
  FLOAT z;
  FLOAT w;  
} VECTOR4; 

typedef struct {
  VECTOR3 X;
  VECTOR3 Y;
  VECTOR3 Z;
  VECTOR3 Position;
} TRANSFORMATION_MATRIX;

//--------------------
// File header
// --------------------

struct {  
  CSTRING Name <name="BeginPOB token">;
  FLOAT Version <name="Version">;
  time_t ModifiedDate <name="Modified Date">;
} FILE_HEADER <name="Header", fgcolor=cBlack, bgcolor=0xccff66>;

struct {
  UINT Length; // 
  char Text[Length]; // 
} BEGINMODEL_STRING <name="BeginModel token">;

//--------------------
// MATERIALLIST
// --------------------

typedef struct {
  FLOAT Red; 
  FLOAT Green; 
  FLOAT Blue; 
  FLOAT Alpha;        
} COLOR;

typedef struct {
  SECTION_HEADER Header;
  struct { 
    FLOAT Opacity;
    FLOAT Unknown;
    COLOR Ambient; 
    COLOR Diffuse;   
    COLOR Specular;
    FLOAT SpecularLevel; //o.o5
    BOOL twoSide;
  } PARAMETERS;
} MATERIAL <name=MaterialName>;

typedef struct {
  SECTION_HEADER Header;
  BOOL Unknown;
  CSTRING Name <name="Texture .rsb file name">;   
  struct { 
    UINT TransparencyType;  // 0 2 3
    UINT IsTiled; // 1 - u-tile, 2 - v-tile, 3 - both none
    FLOAT SelfIllumination; // 0
  } PARAMETERS; 
} TEXTURE <name=TextureName>;

string MaterialName(MATERIAL &material) {
  return "Name: " + material.Header.Name.Text;
} 

string TextureName(TEXTURE &texture) {
  return "FileName: " + texture.Header.Name.Text;
} 

struct {  
  SECTION_HEADER Header;  
  UINT Count <name="Number of materials">;
  typedef struct (int arraySize) {
    MATERIAL array[arraySize] <optimize=false>;
  } MATERIALS; 
  MATERIALS Materials(Count) <name="Materials">; 
  UINT Count <name="Number of textures">;
  if (Count > 0) 
  {
    typedef struct (int arraySize) {
      TEXTURE array[arraySize] <optimize=false>;
    } TEXTURES;    
    TEXTURES TextureArray(Count) <name="Textures">; 
  };
} MATERIAL_LIST <name="Material List">;

//--------------------
// GEOMETRYLIST
// --------------------

typedef struct {
  CSTRING Name;
  TRANSFORMATION_MATRIX Matrix;
} POINT <name=PointName>; 

string PointName (POINT &point) {
  return "Name: " + point.Name.Text;
};

typedef struct (uint version) {
  CSTRING Name;
  INT Properties; // TODO: find all values and meaning of the values
  if (version > 7)           
    INT SurfaceProperty;  // 
} TAGGING_OPTIONS <optimize=false>; 

typedef struct {  
  SECTION_HEADER Header;
 
  SECTION_HEADER Header;       
  BOOL DarkMapped <name="DarkMapped">; 
  BOOL CastShadows <name="CastShadows">;      
  struct {
    UINT Count <name="Number of vertexes">;    
    typedef struct (int arraySize) {
      VECTOR3 array[arraySize];
    } VERTEXES;     
    VERTEXES Vertexes(Count) <name="Vertexes">; 
  } VERTEXES_SECTION <name="Vertex section">;
  UINT Count <name="Number of meshes">; 
  typedef struct {
    struct {
      BYTE Unknown; // 1
      BYTE DetailedDarkmap;
      BYTE DetailTexture;
      INT MaterialIndex;
      UINT isTextured;
      if (isTextured > 0) 
      {
        UINT TextureIndex;
        if (DetailTexture > 0)
          UINT DetailTextureIndex;
      };
      struct {
        INT Unknown;     
        INT SelfIlluminationMap;
        INT SpecularMap;
        INT BumpMap;
        INT ReflectionMap;
        INT MapCount;
      } MAPPING;
    } TEXTURE_PARAMETERS;    
    struct {
      UINT Count <name="Number of faces">;     
      typedef struct (int arraySize) {
        VECTOR4 array[arraySize];
      } NORMALS1;          
      NORMALS1 Normals(Count) <name="Normals??">;           
      typedef struct (int arraySize) {
        VECTOR_SHORT3 array[arraySize];
      } FACE_INDEXES;          
      FACE_INDEXES FaceIndexes(Count) <name="Face indexes">;    
      typedef struct (int arraySize) {
        VECTOR_SHORT3 array[arraySize];
      } TEXTURE_INDEXES;          
      TEXTURE_INDEXES TextureIndexes(Count) <name="UV indexes">;    
      UINT VertexCount;
      UINT TextureCount;         
      typedef struct (int arraySize) {
        VECTOR3 array[arraySize];
      } NORMALS2;       
      NORMALS2 Normals(VertexCount) <name="Normals">;        
      typedef struct (int arraySize) {
        POINT2 array[arraySize];
      } UVs;        
      UVs TextureCoordinates(VertexCount*TextureCount) <name="Texture coordinates">;           
      typedef struct (int arraySize) {
        COLOR array[arraySize] <optimize=false>;
      } FACE_COLOR; 
      FACE_COLOR FaceColor(VertexCount) <name="Faces colors">; 
    } FACE_PARAMETERS;   
  } MESH <name="Mesh">;
  typedef struct (int arraySize) {
    MESH array[arraySize] <optimize=false>;
  } MESHES;     
  MESHES Meshes(Count) <name="Meshes">; 

  struct {
    UINT Count;     
    typedef struct(int arraySize) {
      POINT array[arraySize] <optimize=false>;
    } POINTS;  
    POINTS POBPointArray(Count) <name="Points">;
  } Points <name="Tagging points">;

  struct {
    struct {
      UINT VertexCount <name="Number of vertexes">;
      if (VertexCount > 0) 
      {
        typedef struct (int arraySize) {
          VECTOR3 array[arraySize];
        } NR_VERTEXES; 
        NR_VERTEXES Vertexes(VertexCount); 
      };
    } NON_RENDERED_VERTEXES;
    struct {
      UINT FaceCount;
      if (FaceCount > 0) 
      {
        typedef struct (int arraySize) {
          VECTOR4 array[arraySize];
        } NR_NORMALS;
        NR_NORMALS Normals(FaceCount);
      };
    } NON_RENDERED_MESH_NORMALS;
  } NON_RENDERED_MESHES_DATA1 <name="Non-rendered meshes data">;

  struct {
    UINT Count <name = "Mesh Count">; 
    UINT Count;
    if (Count > 0)          
      TAGGING_OPTIONS TaggingOptions(Header.VERSION.Value)[Count];
    UINT Count; // 0 or 1
    if (Count > 0) 
    {  
      typedef struct {
        TAGGING_OPTIONS TagOptions(Header.VERSION.Value); 
        UINT Count <name="Number of faces">;
        typedef struct (int arraySize) {
          VECTOR_SHORT4 array[arraySize] <optimize=false>;
        } NR_FACE_INDEXES;  
        NR_FACE_INDEXES FaceIndexes(Count) <name="Non-rendered object face indexes">;       
      } NON_RENDERED_MESH;          
      typedef struct (int arraySize) {
         NON_RENDERED_MESH array[arraySize] <optimize=false>;
      } NON_RENDERED_MESHES_DATA2;  
      NON_RENDERED_MESHES_DATA2 NonRenderedMeshes(Count) <name="Non-rendered meshes data">;
    };
  } NONROBJECTS <name="Non-rendered objects section">; 
} OBJECT <name=ObjectName>;

string ObjectName(OBJECT &Object) {
  return "Name: " + Object.Header.Name.Text;
} 

struct { 
  SECTION_HEADER Header;
  UINT Count <name="Object Count">;
  typedef struct (int arraySize) {
    OBJECT array[arraySize] <optimize=false>;
  } OBJECTS; 
  OBJECTS Objects(Count) <name="Objects">; 
} GEOMETRYLIST <name="GeometryList">;

CSTRING EndModel <name="EndModel">;

//------------------
// ObjectList
//------------------

typedef enum <UINT> {
    Blizzard, 
    Snow, 
    Spray, 
    SuperSpray, 
    PArray, 
    PCloud
} PARTICLE_SYSTEM_TYPE;

typedef struct {
  SECTION_HEADER Header;

  typedef struct {
      UINT DynamicsType; // 0 - Gravitation, 2 - Pbomb (Parray)
      switch (DynamicsType) {
        case 0:    
          struct {
            FLOAT MN;  
            FLOAT PbombStrength; 
            FLOAT GravDelay;  
            FLOAT MN; // 0
            UINT MN; // 0  
            UINT MN; // 0  
            struct {
              FLOAT Y;   
              FLOAT Z;
            } GravRotation; 
            FLOAT GravitaionForceStrength; 
          } Some;
          break;
        case 2: 
          struct {
              FLOAT Duration;
              FLOAT Strength;
              FLOAT Range;
              UINT ExplosionType; // 2 - Eponential
              //
              struct {
                FLOAT X; 
                FLOAT Y;   
                FLOAT Z;  
              } Position; 
              //
              struct {
                FLOAT X; 
                FLOAT Y;   
                FLOAT Z;  
              } Rotation; 
              //
              UINT BlastSymmetry; // 1 - cylindrical
              FLOAT StartTime;   
              FLOAT Chaos;  
          } Pbomb;
          break;
      };
  } SPACE_WARPS;   
        
  struct {
      UINT MN; // 1
      UINT SpawnOnDeath;
      FLOAT MN;
      FLOAT AnimationStartTicks;
      FLOAT AnimationLengthTicks;
      FLOAT TicksPerFrame;
      FLOAT MN; // 0 
      BYTE MN; // 1
      BYTE MN; // 1
      BYTE MN; // 
      UINT MN; // 0
   } HEADER;

   PARTICLE_SYSTEM_TYPE ParticleSystemType <name="Particle System">; // 0 - blizzard, 1 - snow, 2 - Spray, 3 - SuperSpray, 4 - PArray, 5 - PCloud
   struct { 
     UINT Length; // 
     char Text[Length]; //
   } PROPERTIES;  
 
   struct { 
     FLOAT Width; // IconSize
     FLOAT Length; // 
     FLOAT Height; // 3D
   } EMITTER_SIZE;
    
   struct { 
      FLOAT ParticleSpeed; // Parray (units in sec) (Particle Motion Speed (units per frame) * 30)
      FLOAT ParticleSpeedVariation; // %ParticleSpeed 
   } PARTICLE_MOTION;
    
   struct {
      FLOAT GrowFor; // Parray (Particle size Grow For / 30)     
      FLOAT FadeFor; // Parray (Particle size Fade For / 30)
   } PARTICLE_Size;
    
    struct {
      FLOAT MN;
      FLOAT MN;
    } SOME;
    
    struct {
      FLOAT Life;
      FLOAT LifeVariation; 
    } PARTICLE_TIMING;
    
    struct{
      FLOAT ParticleSize;
      FLOAT ParticleSizeVariation;
    } PARTICLE_SIZE;
    
    struct {
      FLOAT UseRate; // * 3
      UINT UseTotal;
    } PARTICLE_QUANTITY;
    
    struct {
      UINT SpinAxisControlType; // 0 - Random, 1 - direction of travel, 2- user defined
      FLOAT XAxis;
      FLOAT YAxis;
      FLOAT ZAxis;
      FLOAT Variation;
    } SPIN_AXIS_CONTROL ;
    //
    FLOAT MN; 
    FLOAT MN;
    FLOAT MN;
    FLOAT MN;      
    FLOAT MN;
    FLOAT MN;
    FLOAT MN;
    FLOAT MN;      
    FLOAT MN;
    FLOAT MN;
    //
    UINT ParticleMotionType; // 0 - dir vector, 1 - random Direction
    // 
    struct {
      FLOAT OffAxis;
      FLOAT Spread;
      FLOAT OffPlane;
      FLOAT Spread;
    } SUPERSPRAY_PARTICLE_FORMATION;
        
    struct {
      FLOAT SpinTime;
      FLOAT SpinTimeVariation;
      FLOAT Phase;
      FLOAT PhaseVariation;
    } SpinSpeedControls;
    
    UINT particleType; // 0 - standard, 2 - object fragments
    
    struct {
      UINT SpawnType; // 3 - spawn on death, 4 - spawn trails
      UINT Spawns;
    } PARTICLE_SPAWNING_EFFECTS; 

    FLOAT AnimationStartSeconds;
    FLOAT AnimationLengthSeconds;    
    FLOAT AnimationStartSeconds; // time
    
    struct {
      FLOAT EmiStart; // time    
      FLOAT EmiStop; // time
    } PARTICLE_TIMING;
    
    UINT HideEmitter; // 1 - true

    if (particleType == 2) {
      UINT FragmentsCount; 
         
      typedef struct {
        struct {
            struct {
              FLOAT X;  
              FLOAT Y; 
              FLOAT Z;
            } Position; 

              FLOAT MN;  
              FLOAT MN; 
              FLOAT MN; 
              FLOAT MN;  

            struct {
              FLOAT Y; 
              FLOAT Z;  
            } ForceVector;  
 
            FLOAT Speed; 

            FLOAT MN; // 0 
            FLOAT MN; // 0 
            FLOAT MN; // 5
         } Some;
         UINT Count;
         SECTION_HEADER Header;
         struct {
              UINT Length;  
              char Text[Length];  
         } ObjectProperties;   
         TRANSFORMATION_MATRIX Matrix;
         UINT Count; 
         SECTION_HEADER Header;
         BYTE A;
      } FRAGMENT <name="Fragment object">;
      struct { 
        FRAGMENT frg[FragmentsCount] <optimize=false>;
      } Array <name="Fragment object Array">;
      UINT A;
      if (A > 0) {
        SPACE_WARPS SpaceWarps;
      }
    }
    else {
      struct {
        UINT UseTotal; // * PercentageOfParticles
      } PARTICLE_QUANTITY;

      BYTE isTextured; 
      if (isTextured) {
          UINT Length;   
          char TextureName[Length];
      } 
      UINT SPACEWARPS;
      if (SPACEWARPS) {
        SPACE_WARPS SpaceWarps;
      }
    }
} PARTICLE_NODE_PROPERTIES;

typedef struct {
  struct {
    UINT Position_OutOfRangeType; // 1 - cycle, 3 - ping-pong
    UINT Rotation_OutOfRangeType; // 1 - cycle, 3 - ping-pong
    UINT Unknown;
    FLOAT Unknown; 
    UINT16 Unknown;
    UINT Unknown; 
    UINT16 Unknown; 
    UINT Unknown;  
    BYTE Unknown;
    BYTE Unknown0; 
    UBYTE Unknown;     
  } Prop;
    
  UINT Count<name="Number of position keys">;    
  typedef struct 
  {
    UINT ControllerType; // 3 - Linear Position, 5 - TCB Position
    if (ControllerType == 3) 
    {
      FLOAT Unknown; // 0
      FLOAT Time;
      VECTOR3 Position;  
    }
    else 
    {
      FLOAT Unknown; // 0
      FLOAT Time;
      VECTOR3 Position; 
      FLOAT Tension;  
      FLOAT Contunioty;
      FLOAT Bias;         
    };  
  } POSITION_KEY;       
  typedef struct (int arraySize) {
    POSITION_KEY array[arraySize] <optimize=false>;
  } POSITION_KEYS;     
  POSITION_KEYS PositionKeys(Count);
    
  UINT Count <name="Number of rotation keys">;
  typedef struct {
    UINT ControllerType; // 4 - Linear Rotation
    if (ControllerType == 4) 
    {
      UINT Unknown; // 0
      FLOAT Time;
      UINT Unknown;        
      UINT Unknown;
      UINT Unknown; 
      VECTOR4 Rotation;
    }
  } ROTATION_KEY;    
  typedef struct (int arraySize) {
    ROTATION_KEY array[arraySize] <optimize=false>;
  } ROTATION_KEYS;     
  ROTATION_KEYS RotationKey(Count);
} ANIMATION_PROPERTIES;

typedef struct{
  UINT LightType; // 1 - directional, 2 - omni, 5 - spot, 6 - , 8 - free directional light
  COLOR Ambient <name="Ambient color">;
  COLOR Diffuse <name="Diffuse color">;          
  COLOR Specular <name="Specular color">;
  FLOAT Multiplier;  
  struct {        
    FLOAT HotSpotSize;
    FLOAT FalloffSize; 
  } SPOTLIGHT_PARAMS;
  struct {
    FLOAT Start;
    FLOAT End;
  } FAR_ATTENUATION; 
  BOOL ShadowsOff;
  if (LightType == 8) 
  {
    FLOAT Unknown; // 0
    UINT LightType; // 2 - omni, 1 - directional, 0 - spot 
    UINT Unknown;  // 0
    UINT Unknown;  // 0
    UINT Unknown; // 1
    FLOAT AspectRatio;
    struct {
      FLOAT Width; // Width * AspectRatio 
      FLOAT Length; // HotSpotSize;
    } RECTANGILAR_BEAM_SIZE;
    CSTRING ProjectorMapFileName;
  } 
} LIGHT_NODE_PROPERTIES;

void NodeTree(UINT NodeCount)
{   
  typedef struct { 
    SECTION_HEADER Header;
    if (Header.SectionSize == 1) 
      BYTE Unknown;
    else
    {        
       if (Header.ID != 51)
         CSTRING Name <name = "Tags">;
       else   
         BYTE Unknown;
       TRANSFORMATION_MATRIX Matrix;
       if (Header.ID != 47) {
         switch (Header.ID) {
           case 48: 
             UINT Unknown;
             break;
           case 50: 
             ANIMATION_PROPERTIES AnimationProperties <name="Animation properties">;
             break;
           case 51:
             PARTICLE_NODE_PROPERTIES ParticleProperties <name="Particle properties">;
             break;
        };
     };              
     UINT Count <name="Number of child nodes">;
     if (Count > 0)
       NodeTree(Count);
    };    
  } NODE <name=NodeName>;
  typedef struct (int arraySize) {
    NODE array[arraySize] <optimize=false>;
  } NODES;         
  NODES Nodes(NodeCount)<name="Child nodes">;
};

string NodeName(NODE &node) 
{ 
  local string NodeType;
  switch (node.Header.ID) 
  {
     case 46: NodeType = "Helper Point Node"; break;
     case 47: NodeType = "Group Node"; break;
     case 48: NodeType = "Billboard Node"; break;
     case 49: NodeType = "LOD Node"; break;
     case 50: NodeType = "Animation Node"; break;
     case 51: NodeType = "Particle Node"; break;
     case 52: NodeType = "Forest Node"; break;
     case 53: NodeType = "Light Node"; break;
     case 54: NodeType = "ProjectedMapLight Node"; break;
  };
  return "Name: " + node.Header.Name.Text + " [" + NodeType + "]";
}  

struct {
  SECTION_HEADER Header; 
  struct {
    UINT Count <name="Number of child nodes">; 
    SECTION_HEADER Header;; 
    NodeTree(Count);
  } NODE_TREE <name="Root node">;
} OBJECT_LIST <name="ObjectList">;

CSTRING EndModel <name="EndPOB token">;
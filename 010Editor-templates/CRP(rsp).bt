//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: CRP(rsp).bt
//   Authors: Alexander Evdokimov
//   Version: 0.1
//   Purpose: Rainbow six Rogue Spear CRP files
// File Mask: *.crp
//
//   History: 
//
//   2018.05 v0.1 initial release
//------------------------------------------------

struct {
  FLOAT Version <name="Version">; // 1.8
} HEADER <name="Header">;

//-------------------------------------------------

struct {
  typedef struct {
    UINT VertexCount <name="Vertex count">;  
    struct {
      typedef struct {
        UINT I;
      } INDEX;
      INDEX IndexArray[VertexCount] <name="Index">;
     } INDEX_ARRAY <name="Vertex index array">;
    struct {
      typedef struct {
        FLOAT X;
        FLOAT Y;
        FLOAT Z;
      } COORDINATES <name="Vertex">;
      COORDINATES CoordinatesArray[VertexCount];
    } COORDINATES_ARRAY <name="Vertex cordinates array">;
  } BODYP <optimize=false, name="Body part">;
  BODYP BodyParts[18];
} BODY <name="Vertices">;

//-------------------------------------------------

typedef struct {  
  FLOAT P1;
  FLOAT P2;
  FLOAT P3;
  FLOAT P2;
  FLOAT P3;
  UINT P1;
  UINT P2;
  UINT P3; 
} VERTEX_S;

struct {
  UINT Length;
  char Name[Length];
  UINT Unknown;
  BYTE A;
  BYTE A;
  BYTE A;
  //
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
  FLOAT Unknown;
  //
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
  FLOAT Unknown;
  UINT A;
  if (A > 0)
  {
    UINT A;
  };
  //
  BYTE A;
  BYTE B;
  UINT Unknown; 
  // !?? 
  UINT Unknown; 
  //
  UINT Count;
  typedef struct (int arraySize) {
      VERTEX_S array[arraySize] <optimize=false>;
  } ARRAY;
  ARRAY Vertexes(Count) <optimize=false>;
} VERTEXES <name="Vertexes??">;

//-------------------------------------------------

UINT MeshCount;
typedef struct {
  struct {
  UINT Length;
  char Name[Length];
  UINT Unknown;  
  BYTE A;
  BYTE A;
  BYTE A;
  //
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
  FLOAT Unknown;
  //
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
  FLOAT Unknown;
  UINT A; 
  //  
  if (A > 0)
  { 
    if (A == 5)
      UINT Data[8];
    UINT B;
  }  
  UINT Length;
  CHAR TextureFileName[Length];

  UINT A;
  UINT B;
  UINT C;
  UINT D;
  UINT F;
  UINT G;
  FLOAT nn1[4];
  UINT G;
  FLOAT nn2[16];
  UINT F;
  BYTE A;
  BYTE A;
  } UNKNOWN_DATA;
  //
  struct {
    UINT VertexCount;
    struct {
      FLOAT R;
      FLOAT G;
      FLOAT B;
      FLOAT A;
    } AMBIENT_COLOR[VertexCount]; 
    UINT count2; 
    struct {
      FLOAT A;
      FLOAT B;
    } Unnkown[VertexCount*count2];
    UINT VertexCount; 
    struct {
      FLOAT R;
      FLOAT G;
      FLOAT B;
      FLOAT A;
    } DIFFUSE_COLOR[VertexCount];  
    UINT count4; 
    struct {
      FLOAT U;
      FLOAT V;
    } UV_COORDINATES[VertexCount];
     struct {
      FLOAT X;
      FLOAT Y;
      FLOAT Z;
    } NORMAL1[VertexCount]; 

    UINT FaceCount;
    struct {   
      struct {
        FLOAT X;
        FLOAT Y;
        FLOAT Z;
        FLOAT Distance;
      } NORMAL2[FaceCount]; 
      struct {
        UINT16 I1;
        UINT16 I2;
        UINT16 I3;
      } FACE_INDEXES[FaceCount]; 
      struct {
        UINT16 I1;
        UINT16 I2;
        UINT16 I3;
      } UV_INDEXES[FaceCount];
    } FACES;
  } GEOMETRY_DATA;       
} MESH <optimize=false>;
typedef struct (uint count) {
  MESH  array[count];
} MESH_ARRAY;
MESH_ARRAY Meshes(MeshCount) ;

//-------------------------------------------------
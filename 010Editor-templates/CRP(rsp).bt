//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: CRP(rsp).bt
//   Authors: Alexander Evdokimov
//   Version: 0.1
//   Purpose: Rainbow six Rogue Spear CRP files
// File Mask: *.crp
//
//   History: 
//
//   2018.05 v0.1 initial release
//------------------------------------------------

const uint numberOfBones = 18;

struct {
  FLOAT Version <name="Version">; // 1.8
} HEADER <name="Header">;

//-------------------------------------------------

struct {
  typedef struct {
    UINT VertexCount <name="Vertex count">;  

    struct {
      UINT Index[VertexCount];
    } INDEX_ARRAY <name="Vertex index array">;

    struct {
      typedef struct {
        FLOAT X;
        FLOAT Y;
        FLOAT Z;
      } COORDINATES <name="Vertex">;

      COORDINATES CoordinatesArray[VertexCount];

    } COORDINATES_ARRAY <name="Vertex coordinates array">;

  } BODYP <optimize=false, name="Body part related to bone">;

  BODYP BodyParts[numberOfBones]; // 18 bones total
} BODY <name="Vertexes related to bones (for animation)">;

//-------------------------------------------------

struct {
  UINT Length;
  char Name[Length] <name="Model name">;
  UINT Unknown;
  BYTE Unknown;
  BYTE Unknown;
  BYTE Unknown;
  //
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
  FLOAT Unknown;
  //
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
  FLOAT Unknown;
  UINT A;
  if (A > 0)
  {
    UINT Unknown;
  };
  //
  BYTE Unknown;
  BYTE Unknown;
  UINT Unknown; 
  // !?? 
  UINT Unknown; 
  //
} U <name="Unknown">; 


typedef struct {  
  FLOAT Unknown; // 0
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
  FLOAT Unknown; // 0
  UINT Unknown; // 0
  UINT Unknown; // 0
  UINT Unknown; // 0 
} VERTEX_S <name="Vertex">;

struct {
  UINT Count;
  typedef struct (int arraySize) {
      VERTEX_S array[arraySize] <optimize=false>;
  } VERTEXES2;
  VERTEXES2 Vertexes(Count) <name="Vertexes">;
} VERTEXES <name="Vertexes (Static Pose)">;

//-------------------------------------------------

UINT MeshCount;
typedef struct {
  struct {
    UINT Length;
    char Name[Length];
    UINT Unknown;  
    BYTE Unknown;
    BYTE Unknown;
    BYTE Unknown;
    //
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
    FLOAT Unknown;
    //
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
    FLOAT Unknown;

    UINT TransparencyFlag <name="Effects transparency(BlenMode)??">; // 3, 5
    //  
    if (TransparencyFlag > 0)
    { 
      if (TransparencyFlag == 5) // transparent
        UINT Data[8];
      UINT Unknown; // 12
    }  
  
    UINT Length;
    CHAR TextureFileName[Length];

    UINT Unknown; // 3, 4
    UINT Unknown; // 0
    UINT Unknown; // 1
    UINT Unknown; // 13
    UINT Unknown; // 6
    UINT Unknown; // 0
    FLOAT Unknown1[4];
    UINT Unknown; // 7
    FLOAT Unknown2[16];
    UINT Unknown; // 0
    BYTE Unknown; // 1
    BYTE Unknown; // 1
  } UNKNOWN_DATA <name="Texture properties?">;
  //
  struct {
    UINT VertexCount;
    struct {
      FLOAT R;
      FLOAT G;
      FLOAT B;
      FLOAT A;
    } COLOR1[VertexCount]; 
    UINT count2; 
    struct {
      FLOAT A;
      FLOAT B;
    } Unnkown[VertexCount*count2];
    UINT VertexCount; 
    struct {
      FLOAT R;
      FLOAT G;
      FLOAT B;
      FLOAT A;
    } COLOR2[VertexCount];  
    UINT count4; 
    struct {
      FLOAT U;
      FLOAT V;
    } UV_COORDINATES[VertexCount];
     struct {
      FLOAT X;
      FLOAT Y;
      FLOAT Z;
    } NORMALS[VertexCount] <name="Normals?">; 

    struct {
      UINT FaceCount;
      struct {   
        struct {
          FLOAT X;
          FLOAT Y;
          FLOAT Z;
          FLOAT Distance;
        } FACE_NORMAL[FaceCount]; 
        struct {
          UINT16 I1;
          UINT16 I2;
          UINT16 I3;
        } VERT_INDEXES[FaceCount] <name="Vertex indexes">; 
        struct {
          UINT16 I1;
          UINT16 I2;
          UINT16 I3;
        } TEXTURE_UV_INDEXES[FaceCount] <name="UV indexes">;
      } FACES;
    } FACE_DATA;
  } GEOMETRY_DATA;       
} MESH <optimize=false, name="Mesh">;
typedef struct (uint count) {
  MESH  array[count];
} MESH_ARRAY;
MESH_ARRAY Meshes(MeshCount) ;

//-------------------------------------------------
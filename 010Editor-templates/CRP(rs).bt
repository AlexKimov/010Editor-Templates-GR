//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: CRP.bt
//   Authors: Alexander Evdokimov
//   Version: 0.1
//   Purpose: Rainbow six CRP files
// File Mask: *.crp
//
//   History: 
//
//   2018.12 Began rogue spear compatibility.
//   2017.06 v0.1 initial release
//------------------------------------------------

local uint count;


struct {
  typedef struct {
    UINT VertexCount <name="Vertex count">;
    struct {
      typedef struct {
        UINT I;
      } INDEX;
      INDEX IndexArray[VertexCount] <optimize=false,name="Index">;
     } INDEX_ARRAY <name="Vertex index array">;
    struct {
      typedef struct {
        FLOAT X;
        FLOAT Y;
        FLOAT Z;
      } COORDINATES <name="Vertex">;
      COORDINATES array[VertexCount] <optimize=false>;
    } COORDINATES_ARRAY <name="Vertex cordinates array">;
  } BODYP <name="Body part">;
  BODYP BodyParts[18] <optimize=false>;
} BODY <name="Vertexes">;

//-------------------------------------------------

typedef struct {
  UINT Length;
  char Name[Length];   
  struct {
    struct {
      UBYTE R;
      UBYTE G;
      UBYTE B;
      UBYTE A;
    } AMBIENT_COLOR;
    struct {
      UBYTE R;
      UBYTE G;
      UBYTE B;
      UBYTE A;
    } DIFFUSE_COLOR;
    UINT Unknown; // Transparency type ?
    UINT Transparency; 
    BYTE twoSided; // 1 - yes
  } PROPERTIES;  
} TEXTURE <name=textureName>;

string textureName(TEXTURE & texture) {
  return texture.Name;
};

struct {
  FLOAT Version;

  UINT Length;
  char Name[Length];
  //
  struct {
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
    UINT Unknown;
  } T_PROPERTIES; 
  //
  UINT TextureCount <name="Number of textures">;
  TEXTURE Textures[TextureCount] <optimize=false>;
} TEXTURES <name="Textures">;

//-------------------------------------------------

struct {
  UINT Count;
  typedef struct {
    struct {
      UINT I1;
      UINT I2;
      UINT I3;
    } FACE_INDEXES <name="Face index">;  
    struct {
      UINT I1;
      UINT I2;
      UINT I3;
    } UV_INDEXES <name="Texture coordinates index">;  
    UINT TexureIndex;
    UINT Unknown;
  } PINDEX <name="Index">;
  PINDEX Indexes[Count] <optimize=false>;
} INDEXES <name="Indexes">;

//-------------------------------------------------

struct {
  UINT Count <name="count">;
  typedef struct {
      FLOAT X;
      FLOAT Y;
      FLOAT Z;
  } VERTEX <name="Vertex">;
  VERTEX Vertexes[Count] <optimize=false>;
} OCCLISION <name="Occlusion Data">;

//-------------------------------------------------
struct {
  UINT FaceCount <name="Polygon count">;
  typedef struct {
    struct {    
      FLOAT U;
      FLOAT V;
    } TEX_COORDINATES <name="UV">;   
    struct {
      FLOAT X;
      FLOAT Y;
      FLOAT Z;
    } NORMAL <name="Normal">;
    struct {
      UINT Red;
      UINT Green;
      UINT Blue;
      UINT Alpha;
    } COLOR;
  } Face <name="Face">;
  Face FaceArray[FaceCount] <optimize=false>;
} POLYGONS <name="Faces">;

//-------------------------------------------------

  UINT Count <name="count">;
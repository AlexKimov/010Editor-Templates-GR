//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------


typedef struct { 
  UINT Length;  
  char Text[Length];
} CSTRING; 

typedef struct {
  UBYTE R;
  UBYTE G;
  UBYTE B;
  UBYTE A;     
} VECTOR_4B;

typedef struct {
  UINT Red;
  UINT Green;
  UINT Blue;
  UINT Alpha;
} VECTOR_4UI;

typedef struct {
  UINT X;
  UINT Y;
  UINT Z;
} VECTOR_3UI;

typedef struct {
  FLOAT X;
  FLOAT Y;
  FLOAT Z;
} VECTOR_3F;

typedef struct {
  FLOAT X;
  FLOAT Y;
} VECTOR_2F;

struct {
  FLOAT A;
  UINT Length;
  char Path[Length];
  FLOAT AA[6];
} HEADER <name="Header">;

//-------------------------------------

struct {
  UINT Count;
  struct {
    CSTRING Name;
  } Textures[Count] <optimize=false>;
} TEXTURES <name="Textures">;

//-------------------------------------

struct {
  UINT Count <name="Number of faces">;
  typedef struct {
    VECTOR_3UI FaceIndexes <name="Vertex indexes">;  
    VECTOR_3UI UVIndexes <name="Texture coordinates indexes">;  
    UINT MaterialIndex;
    INT Unknown; // color, index ?
  } FACE <name="Face">;
  FACE Indexes[Count] <optimize=false>;
} INDEXES <name="Face data">;

//-------------------------------------------------

struct {
  UINT Count <name="count">;
  VECTOR_3F Vertexes[Count] <optimize=false, name="Vertex coordinates">;
} VERTEXES_ <name="Vertexes">;

//-------------------------------------------------

struct {
  UINT VertexAttributesCount <name="Number of vertex attributes">;
  typedef struct {
    VECTOR_2F TexCoordinates <name="UV">;   
    VECTOR_3F Normal <name="Normal">;
    VECTOR_4UI FaceColor;
  } VERTEX_ATTRIBUTES <name="Vertex">;
  VERTEX_ATTRIBUTES VertexAttributes[VertexAttributesCount] <optimize=false>;
} FACES <name="Vertex attributes">;

//-------------------------------------------------

struct {
  UINT Count1;
  if (Count1 == 1) {
    UINT Count2;
    struct {
      UINT A;
    } MN1[Count2] <optimize=false>;
  };

  UINT Count; 
  struct {
     UINT A;
  } INDEXES[Count] <optimize=false>;

  UINT Count; 
  if (Count == 1) {
  UINT Length;
  char Name[Length]; 
  FLOAT P[9];
  };
} UNKNOWN <name="">;

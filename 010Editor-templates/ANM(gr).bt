//------------------------------------------------
//--- 010 Editor v7.0 Binary Template
//
//      File: ANM.bt
//   Authors: Alexander Evdokimov
//   Version: 0.1
//   Purpose: Ghost Recon ANM files
// File Mask: *.anm
//
//   History: 
//
//------------------------------------------------

struct {  
 struct {
    UINT Length; // 
    char Text[Length]; // BeginANM.
  } BEGINANM_STRING <name="File ID (Signature)">;
 struct {
    time_t CreateDate <name="File Creation Date">;
    time_t ModifiedDate <name="File Modified Date">;
  } DATETIME <name="File DATETIME">;
} ANM_HEADER <name="ANM Header", fgcolor=cBlack, bgcolor=0xccff66>;

UINT Count;

typedef  struct {
  struct {  
    UINT SectionSize;
    UINT MN;
    struct {    
      UINT Length; // 
      char Text[Length]; //
      UINT Value;
    } VERSION; 
    struct {    
       UINT Length; // 
       char Text[Length]; //
    } NAME_STRING <name="Vehicle node name">; 
  } HEADER <name="HEADER">;

    struct {
      UINT Position_OutOfRangeType; // 1 - cycle, 3 - ping-pong
      UINT Rotation_OutOfRangeType; // 1 - cycle, 3 - ping-pong

      UINT MN; // 0
      UINT16 MN; // 0
      UINT16 MN; // 65535
      UINT16 MN; // 32639
      UINT16 MN; // 128
      FLOAT TicksinSecond; // 4800 
      UINT MN; // 0 
      BYTE MN; // 1
      BYTE MN; // 1
      UBYTE A; // ?    
    } PROPERTIES;

    UINT PKeysCount;    
    typedef struct {                         
        UINT ControllerType; // 3 - Linear Position, 4 - ?, 5 - TCB Position
        if (ControllerType == 3) {
            FLOAT n2; // 0
            FLOAT Time;
            FLOAT X;          
            FLOAT Y;
            FLOAT Z;  
        }
        else {
            FLOAT n2; // 0
            FLOAT Time;
            FLOAT X;          
            FLOAT Y;
            FLOAT Z; 

            FLOAT Tension;  
            FLOAT Contunioty;
            FLOAT Bias;         
        }    
    } PositionKey;       
    typedef struct (int arraySize) {
      PositionKey array[arraySize] <optimize=false>;
    } PositionKeysArray;     
     PositionKeysArray POBPositionKeysArray(PKeysCount);

    UINT RKeysCount;
    typedef struct {
        UINT ControllerType; // 4 - Linear rotation
        UINT MN; //0
        FLOAT Time;

        FLOAT MN; // 0         
        FLOAT MN; // 0  
        FLOAT MN; // 0  
        // transformation matrix rotation in local space (quaternions)
        FLOAT x;          
        FLOAT y;
        FLOAT z; 
        FLOAT Angle;
    } RotationKey;    
    typedef struct (int arraySize) {
      RotationKey array[arraySize] <optimize=false>;
    } RotationKeysArray;     
    RotationKeysArray POBRotationKeysArray(RKeysCount); 
} ANIMATION <name=ObjectName>;

string ObjectName (ANIMATION &animation) {
  return "Object name: " + animation.HEADER.NAME_STRING.Text;
};
    
typedef struct (int arraySize) {
    ANIMATION array[arraySize] <optimize=false>;
} ANIMATION_ARRAY; 
    
ANIMATION_ARRAY AnimationArray(Count) <name="Object animations array">; 

struct {
  UINT Length;
  char Text[Length]; 
} ENDANM_STRING <name="ANM File End">;
